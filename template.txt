from random import randint
from seal import *
from time import time

class SEALWrapper:
    def __init__(self, seal):
        self.seal = seal

    def pad_list(self, l, n):
        return l + ([0]*(n-len(l)))

    def encode(self, x):
        return self.seal["batch_encoder"].encode(x)

    def encrypt(self, x):
        return self.seal["encryptor"].encrypt(x)

    def add(self, x, y):
        return self.seal["evaluator"].add(x, y)

    def add_plain(self, x, y):
        return self["evaluator"].add_plain(x, y)

    def add_inplace(self, x, y):
        self.seal["evaluator"].add_inplace(x, y)

    def add_plain_inplace(self, x, y):
        self.seal["evaluator"].add_plain_inplace(x, y)

    def multiply(self, x, y):
        return self.seal["evaluator"].multiply(x, y)

    def multiply_plain(self, x, y):
        return self.seal["evaluator"].multiply_plain(x, y)

    def multiply_inplace(self, x, y):
        self.seal["evaluator"].multiply_inplace(x, y)

    def multiply_plain_inplace(self, x, y):
        self.seal["evaluator"].multiply_plain_inplace(x, y)

    def rotate_rows(self, x, amt):
        return self.seal["evaluator"].rotate_rows(x, amt, self.seal["galois_keys"])

    def rotate_rows_inplace(self, x, amt):
        self.seal["evaluator"].rotate_rows_inplace(x, amt, self.seal["galois_keys"])

    def relinearize_inplace(self, x):
        self.seal["evaluator"].relinearize_inplace(x, self.seal["relin_keys"])

    def invariant_noise_budget(self, x):
        return self.seal["decryptor"].invariant_noise_budget(x)

def client():
{{#each client_preprocess as |data|}}
    {{data.0}} = {{data.1}}
{{/each}}

def main():
    init_start_time = time()
    
    seal = {}
    seal["parms"] = EncryptionParameters(scheme_type.bfv)

    poly_modulus_degree = 8192*2*2
    seal["parms"].set_poly_modulus_degree(poly_modulus_degree)
    seal["parms"].set_coeff_modulus(CoeffModulus.BFVDefault(poly_modulus_degree))
    seal["parms"].set_plain_modulus(PlainModulus.Batching(poly_modulus_degree, 20))
    seal["context"] = SEALContext(seal["parms"])
    seal["keygen"] = KeyGenerator(seal["context"])
    seal["secret_key"] = seal["keygen"].secret_key()
    seal["public_key"] = seal["keygen"].create_public_key()
    seal["relin_keys"] = seal["keygen"].create_relin_keys()
    seal["galois_keys"] = seal["keygen"].create_galois_keys()

    seal["encryptor"] = Encryptor(seal["context"], seal["public_key"])
    seal["evaluator"] = Evaluator(seal["context"])
    seal["decryptor"] = Decryptor(seal["context"], seal["secret_key"])

    seal["batch_encoder"] = BatchEncoder(seal["context"])
    slot_count = seal["batch_encoder"].slot_count()
    row_size = slot_count / 2

    wrapper = SEALWrapper(seal)

{{#each ciphertexts as |ciphertext|}}
    {{ciphertext}} = wrapper.encode([randint(1, 100) for _ in range(slot_count)])
    {{ciphertext}} = wrapper.encrypt({{ciphertext}})

{{/each}}
{{#each constants as |const|}}
    {{const.[1]}} = wrapper.encode(pad_list({{const.[0]}}, slot_count))

{{/each}}
{{#each literals as |literal|}}
    {{literal.[1]}} = wrapper.encode([{{literal.[0]}} for _ in range(slot_count)])
{{/each}}

    init_end_time = time()
    print("init duration: {}ms".format((init_end_time - init_start_time)*1000))

    exec_start_time = time()

{{#each instrs as |instr|}}
    {{#if (instr_is_inplace instr) }}
    {{#if (instr_is_binary instr) }}
    wrapper.{{instr_name instr}}({{instr.op1}}, {{instr.op2}})
    {{else}}
    wrapper.{{instr_name instr}}({{instr.op1}})
    {{/if}}
    {{else}}
    {{#if (instr_is_binary instr) }}
    {{instr.id}} = wrapper.{{instr_name instr}}({{instr.op1}}, {{instr.op2}})
    {{else}}
    {{instr.id}} = wrapper.{{instr_name instr}}({{instr.op1}})
    {{/if}}
    {{/if}}
{{/each}}

    exec_end_time = time()
    print("exec duration: {}ms".format((exec_end_time - exec_start_time)*1000))
    print("noise budget: {} bits".format(wrapper.invariant_noise_budget({{output}})))

if __name__ == "__main__":
    main()
