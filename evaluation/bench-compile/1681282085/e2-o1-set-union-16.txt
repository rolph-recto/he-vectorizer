[2023-04-12T06:53:47Z INFO  he_vectorizer] parsing: 0ms
[2023-04-12T06:53:47Z INFO  he_vectorizer] elaboration: 0ms
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] running scheduler with iter limit: None
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] starting scheduler epoch 1
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] iteration 1
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 4
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 4
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] iteration 2
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 17
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 17
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] iteration 3
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 31
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 27
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] iteration 4
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 21
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 13
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] iteration 5
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 4
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] iteration 6
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 0
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] starting scheduler epoch 2
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] iteration 7
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 253
[2023-04-12T06:53:47Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 61
[2023-04-12T06:53:48Z INFO  he_vectorizer::scheduling::scheduler] iteration 8
[2023-04-12T06:53:48Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 686
[2023-04-12T06:53:48Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 314
[2023-04-12T06:53:48Z INFO  he_vectorizer::scheduling::scheduler] iteration 9
[2023-04-12T06:53:48Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 914
[2023-04-12T06:53:48Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 476
[2023-04-12T06:53:49Z INFO  he_vectorizer::scheduling::scheduler] iteration 10
[2023-04-12T06:53:49Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 896
[2023-04-12T06:53:49Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 566
[2023-04-12T06:53:49Z INFO  he_vectorizer::scheduling::scheduler] iteration 11
[2023-04-12T06:53:49Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 464
[2023-04-12T06:53:49Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 284
[2023-04-12T06:53:49Z INFO  he_vectorizer::scheduling::scheduler] iteration 12
[2023-04-12T06:53:49Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 64
[2023-04-12T06:53:49Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T06:53:49Z INFO  he_vectorizer::scheduling::scheduler] iteration 13
[2023-04-12T06:53:49Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 0
[2023-04-12T06:53:49Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T06:53:49Z INFO  he_vectorizer::scheduling::scheduler] inline scheduler 1 total visited schedules: 3355
[2023-04-12T06:53:49Z INFO  he_vectorizer] scheduling: 1560ms
[2023-04-12T06:53:49Z INFO  he_vectorizer] circuit generation: 0ms
[2023-04-12T06:53:49Z INFO  he_vectorizer::circ::optimizer] Runner report
    =============
      Stop reason: NodeLimit(501)
      Iterations: 2
      Egraph size: 490 nodes, 255 classes, 501 memo
      Rebuilds: 0
      Total time: 0.000633981
        Search:  (0.22) 0.000139339
        Apply:   (0.71) 0.00045235800000000004
        Rebuild: (0.07) 0.000041783
    
[2023-04-12T06:53:49Z INFO  he_vectorizer::circ::optimizer] equality saturation: 0ms
[2023-04-12T06:53:49Z INFO  he_vectorizer::circ::optimizer] using LP extractor to derive optimized program...
[/home/rolph/.cargo/registry/src/index.crates.io-6f17d22bba15001f/egg-0.9.0/src/lp_extract.rs:137] max_order = 4900.0
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Mar 24 2020 

command line - Cbc_C_Interface -solve -quit (default strategy 1)
Continuous objective value is 198.314 - 0.01 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 293 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 213 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 17 tightened bounds, 103 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 22 tightened bounds, 69 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 9 tightened bounds, 26 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 6 tightened bounds, 21 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 4 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 2 tightened bounds, 0 strengthened rows, 0 substitutions
Cgl0004I processed model has 844 rows, 481 columns (481 integer (481 of which binary)) and 2126 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0038I Initial state - 171 integers unsatisfied sum - 17.5917
Cbc0038I Pass   1: suminf.   17.37195 (185) obj. 1260.32 iterations 79
Cbc0038I Pass   2: suminf.   17.03472 (174) obj. 1332.37 iterations 30
Cbc0038I Pass   3: suminf.   16.61004 (177) obj. 1269.58 iterations 15
Cbc0038I Pass   4: suminf.   16.54754 (173) obj. 1337.08 iterations 12
Cbc0038I Pass   5: suminf.   18.00588 (156) obj. 1273.62 iterations 36
Cbc0038I Pass   6: suminf.   16.63088 (189) obj. 1255.12 iterations 30
Cbc0038I Pass   7: suminf.   16.48802 (179) obj. 1333.32 iterations 20
Cbc0038I Pass   8: suminf.   14.29243 (137) obj. 1523 iterations 41
Cbc0038I Pass   9: suminf.   14.13088 (148) obj. 1432.75 iterations 13
Cbc0038I Pass  10: suminf.   14.13088 (148) obj. 1432.75 iterations 6
Cbc0038I Pass  11: suminf.    9.50588 (137) obj. 1498 iterations 26
Cbc0038I Pass  12: suminf.    9.19338 (142) obj. 1428.25 iterations 15
Cbc0038I Pass  13: suminf.    9.13088 (138) obj. 1495.75 iterations 6
Cbc0038I Pass  14: suminf.   10.31197 (121) obj. 1990.7 iterations 36
Cbc0038I Pass  15: suminf.    9.07998 (126) obj. 1586.79 iterations 8
Cbc0038I Pass  16: suminf.    8.94131 (135) obj. 1574.07 iterations 24
Cbc0038I Pass  17: suminf.    6.77991 (95) obj. 4790.75 iterations 46
Cbc0038I Pass  18: suminf.    6.77991 (95) obj. 4790.75 iterations 14
Cbc0038I Pass  19: suminf.    9.35417 (60) obj. 9121.17 iterations 55
Cbc0038I Pass  20: suminf.    9.35417 (60) obj. 9121.17 iterations 9
Cbc0038I Pass  21: suminf.    5.27778 (34) obj. 10243.8 iterations 12
Cbc0038I Pass  22: suminf.    5.27778 (34) obj. 10243.8 iterations 5
Cbc0038I Pass  23: suminf.    6.00000 (20) obj. 11067.8 iterations 20
Cbc0038I Pass  24: suminf.    4.00000 (12) obj. 11053.7 iterations 9
Cbc0038I Pass  25: suminf.    4.00000 (12) obj. 11053.7 iterations 0
Cbc0038I Pass  26: suminf.    0.00000 (0) obj. 11103 iterations 7
Cbc0038I Solution found of 11103
Cbc0038I Rounding solution of 9439 is better than previous of 11103

Cbc0038I Before mini branch and bound, 250 integers at bound fixed and 0 continuous
Cbc0038I Full problem 844 rows 481 columns, reduced to 362 rows 203 columns
Cbc0038I Mini branch and bound improved solution from 9439 to 6773 (0.14 seconds)
Cbc0038I Round again with cutoff of 6219.07
Cbc0038I Pass  27: suminf.   17.37195 (185) obj. 1260.32 iterations 0
Cbc0038I Pass  28: suminf.   17.03472 (174) obj. 1332.37 iterations 36
Cbc0038I Pass  29: suminf.   16.61004 (177) obj. 1269.58 iterations 30
Cbc0038I Pass  30: suminf.   16.54754 (173) obj. 1337.08 iterations 5
Cbc0038I Pass  31: suminf.   16.54754 (173) obj. 1337.08 iterations 3
Cbc0038I Pass  32: suminf.   16.63996 (126) obj. 1934.37 iterations 77
Cbc0038I Pass  33: suminf.    8.94498 (137) obj. 1498.56 iterations 51
Cbc0038I Pass  34: suminf.    8.94498 (137) obj. 1498.56 iterations 8
Cbc0038I Pass  35: suminf.   14.27991 (110) obj. 4288.75 iterations 46
Cbc0038I Pass  36: suminf.   10.27991 (102) obj. 3982.75 iterations 23
Cbc0038I Pass  37: suminf.   10.27991 (102) obj. 3982.75 iterations 1
Cbc0038I Pass  38: suminf.   10.75796 (82) obj. 6219.07 iterations 55
Cbc0038I Pass  39: suminf.    8.73611 (60) obj. 6072.44 iterations 14
Cbc0038I Pass  40: suminf.    8.23611 (58) obj. 6073.94 iterations 28
Cbc0038I Pass  41: suminf.    8.23611 (58) obj. 6073.94 iterations 26
Cbc0038I Pass  42: suminf.    9.59437 (57) obj. 6219.07 iterations 42
Cbc0038I Pass  43: suminf.    8.05556 (61) obj. 6007.29 iterations 35
Cbc0038I Pass  44: suminf.   12.42359 (55) obj. 6219.07 iterations 41
Cbc0038I Pass  45: suminf.   10.76175 (52) obj. 6219.07 iterations 17
Cbc0038I Pass  46: suminf.    8.42102 (57) obj. 6219.07 iterations 22
Cbc0038I Pass  47: suminf.    7.84656 (46) obj. 6219.07 iterations 6
Cbc0038I Pass  48: suminf.    7.84656 (46) obj. 6219.07 iterations 7
Cbc0038I Pass  49: suminf.    8.47222 (45) obj. 5892.39 iterations 34
Cbc0038I Pass  50: suminf.    8.47222 (45) obj. 5892.39 iterations 7
Cbc0038I Pass  51: suminf.    8.47222 (45) obj. 5892.39 iterations 15
Cbc0038I Pass  52: suminf.    8.47222 (45) obj. 5892.39 iterations 11
Cbc0038I Pass  53: suminf.    8.08333 (53) obj. 5883.43 iterations 8
Cbc0038I Pass  54: suminf.   10.60447 (73) obj. 6219.07 iterations 51
Cbc0038I Pass  55: suminf.    8.17058 (46) obj. 6219.07 iterations 23
Cbc0038I Pass  56: suminf.    8.17058 (46) obj. 6219.07 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 259 integers at bound fixed and 0 continuous
Cbc0038I Full problem 844 rows 481 columns, reduced to 346 rows 194 columns
Cbc0038I Mini branch and bound did not improve solution (0.19 seconds)
Cbc0038I After 0.19 seconds - Feasibility pump exiting with objective of 6773 - took 0.11 seconds
Cbc0012I Integer solution of 6773 found by feasibility pump after 0 iterations and 0 nodes (0.19 seconds)
Cbc0038I Full problem 844 rows 481 columns, reduced to 245 rows 141 columns
Cbc0031I 43 added rows had average density of 121
Cbc0013I At root node, 43 cuts changed objective from 1242.7083 to 4998.9124 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 26 row cuts average 2.4 elements, 2 column cuts (2 active)  in 0.173 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 2127 row cuts average 159.0 elements, 0 column cuts (0 active)  in 0.469 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 12.0 elements, 0 column cuts (0 active)  in 0.038 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 4 row cuts average 48.5 elements, 0 column cuts (0 active)  in 0.221 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 343 row cuts average 79.9 elements, 0 column cuts (0 active)  in 0.054 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 6773 best solution, best possible 5055.5151 (2.53 seconds)
Cbc0001I Search completed - best objective 6773, took 11744 iterations and 12 nodes (3.25 seconds)
Cbc0032I Strong branching done 400 times (16844 iterations), fathomed 3 nodes and fixed 10 variables
Cbc0035I Maximum depth 3, 94 variables fixed on reduced cost
Cuts at root node changed objective from 1242.71 to 5055.52
Probing was tried 100 times and created 28 cuts of which 0 were active after adding rounds of cuts (0.173 seconds)
Gomory was tried 128 times and created 2207 cuts of which 0 were active after adding rounds of cuts (0.504 seconds)
Knapsack was tried 100 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.038 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
MixedIntegerRounding2 was tried 100 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.221 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
TwoMirCuts was tried 128 times and created 845 cuts of which 0 were active after adding rounds of cuts (0.161 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
ImplicationCuts was tried 28 times and created 12 cuts of which 0 were active after adding rounds of cuts (0.011 seconds)

Result - Optimal solution found

Objective value:                6773.00000000
Enumerated nodes:               12
Total iterations:               11744
Time (CPU seconds):             3.27
Time (Wallclock seconds):       3.32

Total time (CPU seconds):       3.27   (Wallclock seconds):       3.32

[2023-04-12T06:53:52Z INFO  he_vectorizer::circ::optimizer] extraction: 3317ms
[2023-04-12T06:53:52Z INFO  he_vectorizer] circuit optimization: 3318ms
[2023-04-12T06:53:52Z INFO  he_vectorizer] plaintext hoisting: 0ms
[2023-04-12T06:53:52Z INFO  he_vectorizer] circuit lowering: 0ms
[2023-04-12T06:53:52Z INFO  he_vectorizer] using pyseal backend for code generation
[2023-04-12T06:53:52Z INFO  he_vectorizer] printed generated code to stdout
def client_pre(wrapper):
    wrapper.client_input("b_id")
    wrapper.client_input("b_data")
    wrapper.client_input("a_id")
    wrapper.client_input("a_data")
    v_b_data_1 = wrapper.build_vector("b_data", None, [0], [FilledDim(0, 16, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_b_data_1", v_b_data_1)
    v_a_id_1 = wrapper.build_vector("a_id", None, [0, 0], [FilledDim(1, 4, 1, 0, 0, 0, 0), FilledDim(0, 16, 1, 0, 0, 0, 0), EmptyDim(16, 0, 0, 0)])
    wrapper.client_send("v_a_id_1", v_a_id_1)
    v_b_id_1 = wrapper.build_vector("b_id", None, [0, 0], [FilledDim(1, 4, 1, 0, 0, 0, 0), EmptyDim(16, 0, 0, 0), FilledDim(0, 16, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_b_id_1", v_b_id_1)
    v_a_data_1 = wrapper.build_vector("a_data", None, [0], [FilledDim(0, 16, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_a_data_1", v_a_data_1)

def client_post(wrapper):
    __out = wrapper.client_recv("__out")
    wrapper.client_output(__out)

def server(wrapper):
    v_b_data_1 = wrapper.server_recv("v_b_data_1")
    v_a_id_1 = wrapper.server_recv("v_a_id_1")
    v_b_id_1 = wrapper.server_recv("v_b_id_1")
    v_a_data_1 = wrapper.server_recv("v_a_data_1")
    const_1 = wrapper.const(1)
    const_neg1 = wrapper.const(-1)
    wrapper.start_server_exec()
    wrapper.encode(const_1, [])
    wrapper.encode(const_neg1, [])
    b_sum = wrapper.ciphertext_array([], 0)
    instr4 = wrapper.subtract(v_a_id_1.get(), v_b_id_1.get())
    wrapper.multiply_inplace(instr4, instr4)
    wrapper.relinearize_inplace(instr4)
    wrapper.multiply_plain_inplace(instr4, const_neg1.get())
    wrapper.add_plain_inplace(instr4, const_1.get())
    instr8 = wrapper.rotate_rows(-512, instr4)
    wrapper.multiply_inplace(instr8, instr4)
    wrapper.relinearize_inplace(instr8)
    instr10 = wrapper.rotate_rows(-256, instr8)
    wrapper.multiply_inplace(instr8, instr10)
    wrapper.relinearize_inplace(instr8)
    wrapper.multiply_plain_inplace(instr8, const_neg1.get())
    wrapper.add_plain_inplace(instr8, const_1.get())
    instr14 = wrapper.rotate_rows(-128, instr8)
    wrapper.multiply_inplace(instr14, instr8)
    wrapper.relinearize_inplace(instr14)
    instr16 = wrapper.rotate_rows(-64, instr14)
    wrapper.multiply_inplace(instr14, instr16)
    wrapper.relinearize_inplace(instr14)
    instr18 = wrapper.rotate_rows(-32, instr14)
    wrapper.multiply_inplace(instr14, instr18)
    wrapper.relinearize_inplace(instr14)
    instr20 = wrapper.rotate_rows(-16, instr14)
    wrapper.multiply_inplace(instr14, instr20)
    wrapper.relinearize_inplace(instr14)
    wrapper.multiply_inplace(instr14, v_b_data_1.get())
    wrapper.relinearize_inplace(instr14)
    instr23 = wrapper.rotate_rows(-8, instr14)
    wrapper.add_inplace(instr23, instr14)
    instr25 = wrapper.rotate_rows(-4, instr23)
    wrapper.add_inplace(instr25, instr23)
    instr27 = wrapper.rotate_rows(-2, instr25)
    wrapper.add_inplace(instr25, instr27)
    instr29 = wrapper.rotate_rows(-1, instr25)
    wrapper.add_inplace(instr29, instr25)
    wrapper.set(b_sum, [], instr29)
    a_sum = wrapper.ciphertext_array([], 0)
    instr32 = wrapper.rotate_rows(-8, v_a_data_1.get())
    wrapper.add_inplace(instr32, v_a_data_1.get())
    instr34 = wrapper.rotate_rows(-4, instr32)
    wrapper.add_inplace(instr32, instr34)
    instr36 = wrapper.rotate_rows(-2, instr32)
    wrapper.add_inplace(instr36, instr32)
    instr38 = wrapper.rotate_rows(-1, instr36)
    wrapper.add_inplace(instr38, instr36)
    wrapper.set(a_sum, [], instr38)
    __out = wrapper.ciphertext_array([], 0)
    instr42 = wrapper.add(b_sum.get(), a_sum.get())
    wrapper.set(__out, [], instr42)
    wrapper.end_server_exec()
    wrapper.server_send("__out", __out)
[2023-04-12T06:53:52Z INFO  he_vectorizer] code generation: 0ms
[2023-04-12T06:53:52Z INFO  he_vectorizer] total compile time: 4880ms
