[2023-04-11T01:05:45Z INFO  he_vectorizer] parsing: 0ms
[2023-04-11T01:05:45Z INFO  he_vectorizer] elaboration: 0ms
[2023-04-11T01:05:45Z INFO  he_vectorizer::scheduling::scheduler] running scheduler with iter limit: None
[2023-04-11T01:05:45Z INFO  he_vectorizer::scheduling::scheduler] starting scheduler epoch 1
[2023-04-11T01:05:46Z INFO  he_vectorizer::scheduling::scheduler] iteration 1
[2023-04-11T01:05:46Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 3
[2023-04-11T01:05:46Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 1
[2023-04-11T01:05:46Z INFO  he_vectorizer::scheduling::scheduler] iteration 2
[2023-04-11T01:05:46Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 4
[2023-04-11T01:05:46Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 1
[2023-04-11T01:05:46Z INFO  he_vectorizer::scheduling::scheduler] iteration 3
[2023-04-11T01:05:46Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 2
[2023-04-11T01:05:46Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-11T01:05:46Z INFO  he_vectorizer::scheduling::scheduler] iteration 4
[2023-04-11T01:05:46Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 0
[2023-04-11T01:05:46Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-11T01:05:46Z INFO  he_vectorizer::scheduling::scheduler] inline scheduler 1 total visited schedules: 10
[2023-04-11T01:05:46Z INFO  he_vectorizer] scheduling: 555ms
[2023-04-11T01:05:46Z INFO  he_vectorizer] circuit generation: 0ms
[2023-04-11T01:05:46Z INFO  he_vectorizer] circuit optimization: 0ms
[2023-04-11T01:05:46Z INFO  he_vectorizer] plaintext hoisting: 0ms
[2023-04-11T01:05:46Z INFO  he_vectorizer] circuit lowering: 0ms
[2023-04-11T01:05:46Z INFO  he_vectorizer] using pyseal backend for code generation
[2023-04-11T01:05:46Z INFO  he_vectorizer] printed generated code to stdout
def client_pre(wrapper):
    wrapper.client_input("keys")
    wrapper.client_input("query")
    wrapper.client_input("values")
    v_query_1 = wrapper.build_vector("query", None, [3], [EmptyDim(1024, 0, 0, 0)])
    wrapper.client_send("v_query_1", v_query_1)
    v_keys_1 = wrapper.build_vector("keys", None, [0, 8], [FilledDim(0, 1024, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_keys_1", v_keys_1)
    v_keys_2 = wrapper.build_vector("keys", None, [0, 5], [FilledDim(0, 1024, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_keys_2", v_keys_2)
    v_keys_3 = wrapper.build_vector("keys", None, [0, 9], [FilledDim(0, 1024, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_keys_3", v_keys_3)
    v_query_2 = wrapper.build_vector("query", None, [9], [EmptyDim(1024, 0, 0, 0)])
    wrapper.client_send("v_query_2", v_query_2)
    v_query_3 = wrapper.build_vector("query", None, [7], [EmptyDim(1024, 0, 0, 0)])
    wrapper.client_send("v_query_3", v_query_3)
    v_values_1 = wrapper.build_vector("values", None, [0], [FilledDim(0, 1024, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_values_1", v_values_1)
    v_query_4 = wrapper.build_vector("query", None, [2], [EmptyDim(1024, 0, 0, 0)])
    wrapper.client_send("v_query_4", v_query_4)
    v_query_5 = wrapper.build_vector("query", None, [8], [EmptyDim(1024, 0, 0, 0)])
    wrapper.client_send("v_query_5", v_query_5)
    v_keys_4 = wrapper.build_vector("keys", None, [0, 4], [FilledDim(0, 1024, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_keys_4", v_keys_4)
    v_keys_5 = wrapper.build_vector("keys", None, [0, 7], [FilledDim(0, 1024, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_keys_5", v_keys_5)
    v_keys_6 = wrapper.build_vector("keys", None, [0, 1], [FilledDim(0, 1024, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_keys_6", v_keys_6)
    v_query_6 = wrapper.build_vector("query", None, [5], [EmptyDim(1024, 0, 0, 0)])
    wrapper.client_send("v_query_6", v_query_6)
    v_keys_7 = wrapper.build_vector("keys", None, [0, 3], [FilledDim(0, 1024, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_keys_7", v_keys_7)
    v_query_7 = wrapper.build_vector("query", None, [1], [EmptyDim(1024, 0, 0, 0)])
    wrapper.client_send("v_query_7", v_query_7)
    v_keys_8 = wrapper.build_vector("keys", None, [0, 0], [FilledDim(0, 1024, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_keys_8", v_keys_8)
    v_keys_9 = wrapper.build_vector("keys", None, [0, 6], [FilledDim(0, 1024, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_keys_9", v_keys_9)
    v_query_8 = wrapper.build_vector("query", None, [4], [EmptyDim(1024, 0, 0, 0)])
    wrapper.client_send("v_query_8", v_query_8)
    v_keys_10 = wrapper.build_vector("keys", None, [0, 2], [FilledDim(0, 1024, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_keys_10", v_keys_10)
    v_query_9 = wrapper.build_vector("query", None, [6], [EmptyDim(1024, 0, 0, 0)])
    wrapper.client_send("v_query_9", v_query_9)
    v_query_10 = wrapper.build_vector("query", None, [0], [EmptyDim(1024, 0, 0, 0)])
    wrapper.client_send("v_query_10", v_query_10)

def client_post(wrapper):
    __out = wrapper.client_recv("__out")
    wrapper.client_output(__out)

def server(wrapper):
    v_query_1 = wrapper.server_recv("v_query_1")
    v_keys_1 = wrapper.server_recv("v_keys_1")
    v_keys_2 = wrapper.server_recv("v_keys_2")
    v_keys_3 = wrapper.server_recv("v_keys_3")
    v_query_2 = wrapper.server_recv("v_query_2")
    v_query_3 = wrapper.server_recv("v_query_3")
    v_values_1 = wrapper.server_recv("v_values_1")
    v_query_4 = wrapper.server_recv("v_query_4")
    v_query_5 = wrapper.server_recv("v_query_5")
    v_keys_4 = wrapper.server_recv("v_keys_4")
    v_keys_5 = wrapper.server_recv("v_keys_5")
    v_keys_6 = wrapper.server_recv("v_keys_6")
    v_query_6 = wrapper.server_recv("v_query_6")
    v_keys_7 = wrapper.server_recv("v_keys_7")
    v_query_7 = wrapper.server_recv("v_query_7")
    v_keys_8 = wrapper.server_recv("v_keys_8")
    v_keys_9 = wrapper.server_recv("v_keys_9")
    v_query_8 = wrapper.server_recv("v_query_8")
    v_keys_10 = wrapper.server_recv("v_keys_10")
    v_query_9 = wrapper.server_recv("v_query_9")
    v_query_10 = wrapper.server_recv("v_query_10")
    const_1 = wrapper.const(1)
    const_neg1 = wrapper.const(-1)
    wrapper.start_server_exec()
    wrapper.encode(const_1, [])
    wrapper.encode(const_neg1, [])
    ct1 = wrapper.ciphertext_array([10], 0)
    wrapper.set(ct1, [0], v_query_10.get())
    wrapper.set(ct1, [1], v_query_7.get())
    wrapper.set(ct1, [2], v_query_4.get())
    wrapper.set(ct1, [3], v_query_1.get())
    wrapper.set(ct1, [4], v_query_8.get())
    wrapper.set(ct1, [5], v_query_6.get())
    wrapper.set(ct1, [6], v_query_9.get())
    wrapper.set(ct1, [7], v_query_3.get())
    wrapper.set(ct1, [8], v_query_5.get())
    wrapper.set(ct1, [9], v_query_2.get())
    ct2 = wrapper.ciphertext_array([10], 0)
    wrapper.set(ct2, [0], v_keys_8.get())
    wrapper.set(ct2, [1], v_keys_6.get())
    wrapper.set(ct2, [2], v_keys_10.get())
    wrapper.set(ct2, [3], v_keys_7.get())
    wrapper.set(ct2, [4], v_keys_4.get())
    wrapper.set(ct2, [5], v_keys_2.get())
    wrapper.set(ct2, [6], v_keys_9.get())
    wrapper.set(ct2, [7], v_keys_5.get())
    wrapper.set(ct2, [8], v_keys_1.get())
    wrapper.set(ct2, [9], v_keys_3.get())
    mask = wrapper.ciphertext_array([], 0)
    __reduce_1 = wrapper.ciphertext_array([10], 1)
    for i9 in range(10):
        instr3 = wrapper.subtract(ct1.get([i9]), ct2.get([i9]))
        wrapper.multiply_inplace(instr3, instr3)
        wrapper.relinearize_inplace(instr3)
        wrapper.multiply_plain_inplace(instr3, const_neg1.get())
        wrapper.add_plain_inplace(instr3, const_1.get())
        wrapper.set(__reduce_1, [i9], instr3)
    
    instr8 = wrapper.multiply(__reduce_1.get([1]), __reduce_1.get([0]))
    wrapper.relinearize_inplace(instr8)
    instr9 = wrapper.multiply(__reduce_1.get([7]), __reduce_1.get([6]))
    wrapper.relinearize_inplace(instr9)
    instr10 = wrapper.multiply(__reduce_1.get([9]), __reduce_1.get([8]))
    wrapper.relinearize_inplace(instr10)
    wrapper.multiply_inplace(instr9, instr10)
    wrapper.relinearize_inplace(instr9)
    instr12 = wrapper.multiply(__reduce_1.get([3]), __reduce_1.get([2]))
    wrapper.relinearize_inplace(instr12)
    instr13 = wrapper.multiply(__reduce_1.get([5]), __reduce_1.get([4]))
    wrapper.relinearize_inplace(instr13)
    wrapper.multiply_inplace(instr12, instr13)
    wrapper.relinearize_inplace(instr12)
    wrapper.multiply_inplace(instr9, instr12)
    wrapper.relinearize_inplace(instr9)
    wrapper.multiply_inplace(instr8, instr9)
    wrapper.relinearize_inplace(instr8)
    wrapper.set(mask, [], instr8)
    __out = wrapper.ciphertext_array([], 0)
    instr19 = wrapper.multiply(v_values_1.get(), mask.get())
    wrapper.relinearize_inplace(instr19)
    instr20 = wrapper.rotate_rows(-512, instr19)
    wrapper.add_inplace(instr19, instr20)
    instr22 = wrapper.rotate_rows(-256, instr19)
    wrapper.add_inplace(instr19, instr22)
    instr24 = wrapper.rotate_rows(-128, instr19)
    wrapper.add_inplace(instr19, instr24)
    instr26 = wrapper.rotate_rows(-64, instr19)
    wrapper.add_inplace(instr19, instr26)
    instr28 = wrapper.rotate_rows(-32, instr19)
    wrapper.add_inplace(instr19, instr28)
    instr30 = wrapper.rotate_rows(-16, instr19)
    wrapper.add_inplace(instr19, instr30)
    instr32 = wrapper.rotate_rows(-8, instr19)
    wrapper.add_inplace(instr19, instr32)
    instr34 = wrapper.rotate_rows(-4, instr19)
    wrapper.add_inplace(instr19, instr34)
    instr36 = wrapper.rotate_rows(-2, instr19)
    wrapper.add_inplace(instr19, instr36)
    instr38 = wrapper.rotate_rows(-1, instr19)
    wrapper.add_inplace(instr19, instr38)
    wrapper.set(__out, [], instr19)
    wrapper.end_server_exec()
    wrapper.server_send("__out", __out)
[2023-04-11T01:05:46Z INFO  he_vectorizer] code generation: 0ms
[2023-04-11T01:05:46Z INFO  he_vectorizer] total compile time: 557ms
