[2023-04-12T06:59:05Z INFO  he_vectorizer] parsing: 0ms
[2023-04-12T06:59:05Z INFO  he_vectorizer] elaboration: 0ms
[2023-04-12T06:59:05Z INFO  he_vectorizer::scheduling::scheduler] running scheduler with iter limit: None
[2023-04-12T06:59:05Z INFO  he_vectorizer::scheduling::scheduler] starting scheduler epoch 1
[2023-04-12T06:59:05Z INFO  he_vectorizer::scheduling::scheduler] iteration 1
[2023-04-12T06:59:05Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 3
[2023-04-12T06:59:05Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 1
[2023-04-12T06:59:05Z INFO  he_vectorizer::scheduling::scheduler] iteration 2
[2023-04-12T06:59:05Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 4
[2023-04-12T06:59:05Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 1
[2023-04-12T06:59:05Z INFO  he_vectorizer::scheduling::scheduler] iteration 3
[2023-04-12T06:59:05Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 2
[2023-04-12T06:59:05Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T06:59:05Z INFO  he_vectorizer::scheduling::scheduler] iteration 4
[2023-04-12T06:59:05Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 0
[2023-04-12T06:59:05Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T06:59:05Z INFO  he_vectorizer::scheduling::scheduler] starting scheduler epoch 2
[2023-04-12T06:59:06Z INFO  he_vectorizer::scheduling::scheduler] iteration 5
[2023-04-12T06:59:06Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 76
[2023-04-12T06:59:06Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 2
[2023-04-12T06:59:22Z INFO  he_vectorizer::scheduling::scheduler] iteration 6
[2023-04-12T06:59:22Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 220
[2023-04-12T06:59:22Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 5
[2023-04-12T06:59:22Z INFO  he_vectorizer::scheduling::scheduler] iteration 7
[2023-04-12T06:59:22Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 223
[2023-04-12T06:59:22Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T06:59:22Z INFO  he_vectorizer::scheduling::scheduler] iteration 8
[2023-04-12T06:59:22Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 101
[2023-04-12T06:59:22Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 4
[2023-04-12T06:59:22Z INFO  he_vectorizer::scheduling::scheduler] iteration 9
[2023-04-12T06:59:22Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 0
[2023-04-12T06:59:22Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T06:59:22Z INFO  he_vectorizer::scheduling::scheduler] inline scheduler 1 total visited schedules: 630
[2023-04-12T06:59:22Z INFO  he_vectorizer] scheduling: 16862ms
[2023-04-12T06:59:22Z INFO  he_vectorizer] circuit generation: 0ms
[2023-04-12T06:59:22Z INFO  he_vectorizer::circ::optimizer] Runner report
    =============
      Stop reason: NodeLimit(503)
      Iterations: 2
      Egraph size: 492 nodes, 260 classes, 503 memo
      Rebuilds: 0
      Total time: 0.000550888
        Search:  (0.20) 0.000107463
        Apply:   (0.72) 0.000397834
        Rebuild: (0.08) 0.000045107999999999996
    
[2023-04-12T06:59:22Z INFO  he_vectorizer::circ::optimizer] equality saturation: 0ms
[2023-04-12T06:59:22Z INFO  he_vectorizer::circ::optimizer] using LP extractor to derive optimized program...
[/home/rolph/.cargo/registry/src/index.crates.io-6f17d22bba15001f/egg-0.9.0/src/lp_extract.rs:137] max_order = 4920.0
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Mar 24 2020 

command line - Cbc_C_Interface -solve -quit (default strategy 1)
Continuous objective value is 620.088 - 0.01 seconds
Cgl0003I 1 fixed, 0 tightened bounds, 291 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 211 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 38 tightened bounds, 108 strengthened rows, 0 substitutions
Cgl0003I 6 fixed, 12 tightened bounds, 73 strengthened rows, 0 substitutions
Cgl0003I 3 fixed, 0 tightened bounds, 4 strengthened rows, 1 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 24 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 4 tightened bounds, 29 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 1 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 1 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 1 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 814 rows, 473 columns (473 integer (473 of which binary)) and 2072 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0038I Initial state - 181 integers unsatisfied sum - 14.3468
Cbc0038I Pass   1: suminf.   13.95885 (184) obj. 1450.26 iterations 60
Cbc0038I Pass   2: suminf.   13.93725 (180) obj. 1458.43 iterations 9
Cbc0038I Pass   3: suminf.    8.49626 (175) obj. 2018.05 iterations 40
Cbc0038I Pass   4: suminf.    8.43725 (169) obj. 2028.43 iterations 25
Cbc0038I Pass   5: suminf.    9.11818 (117) obj. 2542.28 iterations 53
Cbc0038I Pass   6: suminf.    9.02830 (108) obj. 2544.9 iterations 11
Cbc0038I Pass   7: suminf.    8.98611 (98) obj. 2636.44 iterations 9
Cbc0038I Pass   8: suminf.    8.81250 (52) obj. 3035.25 iterations 35
Cbc0038I Pass   9: suminf.    8.81250 (52) obj. 3035.25 iterations 7
Cbc0038I Pass  10: suminf.    8.75000 (23) obj. 3157 iterations 29
Cbc0038I Pass  11: suminf.    7.56250 (48) obj. 3127.25 iterations 20
Cbc0038I Pass  12: suminf.    7.50000 (44) obj. 3142.25 iterations 8
Cbc0038I Pass  13: suminf.    5.50000 (11) obj. 3346 iterations 35
Cbc0038I Pass  14: suminf.    5.50000 (11) obj. 3346 iterations 2
Cbc0038I Pass  15: suminf.    0.00000 (0) obj. 3471 iterations 12
Cbc0038I Solution found of 3471
Cbc0038I Rounding solution of 3467 is better than previous of 3471

Cbc0038I Before mini branch and bound, 260 integers at bound fixed and 0 continuous
Cbc0038I Full problem 814 rows 473 columns, reduced to 340 rows 188 columns
Cbc0038I Mini branch and bound improved solution from 3467 to 2895 (0.12 seconds)
Cbc0038I Round again with cutoff of 2747.74
Cbc0038I Pass  16: suminf.   13.95885 (184) obj. 1450.26 iterations 0
Cbc0038I Pass  17: suminf.   13.43725 (179) obj. 1548.43 iterations 27
Cbc0038I Pass  18: suminf.   13.43725 (179) obj. 1548.43 iterations 3
Cbc0038I Pass  19: suminf.   13.43725 (179) obj. 1548.43 iterations 1
Cbc0038I Pass  20: suminf.   10.97642 (151) obj. 1756.06 iterations 46
Cbc0038I Pass  21: suminf.    8.40544 (172) obj. 1705.83 iterations 42
Cbc0038I Pass  22: suminf.    8.18953 (172) obj. 1720.99 iterations 15
Cbc0038I Pass  23: suminf.    8.15912 (170) obj. 1727.74 iterations 11
Cbc0038I Pass  24: suminf.    9.90909 (115) obj. 2219.51 iterations 52
Cbc0038I Pass  25: suminf.    9.02830 (108) obj. 2244.9 iterations 25
Cbc0038I Pass  26: suminf.    8.98611 (98) obj. 2336.44 iterations 10
Cbc0038I Pass  27: suminf.    8.81250 (52) obj. 2739.25 iterations 72
Cbc0038I Pass  28: suminf.    8.81250 (52) obj. 2739.25 iterations 14
Cbc0038I Pass  29: suminf.    9.99571 (36) obj. 2747.74 iterations 81
Cbc0038I Pass  30: suminf.    7.56250 (51) obj. 2747.74 iterations 58
Cbc0038I Pass  31: suminf.    7.53860 (51) obj. 2747.74 iterations 4
Cbc0038I Pass  32: suminf.   10.26389 (37) obj. 2747.74 iterations 41
Cbc0038I Pass  33: suminf.   14.39792 (45) obj. 2747.74 iterations 86
Cbc0038I Pass  34: suminf.    9.42071 (53) obj. 2747.74 iterations 82
Cbc0038I Pass  35: suminf.    8.56730 (61) obj. 2747.74 iterations 28
Cbc0038I Pass  36: suminf.    8.56730 (61) obj. 2747.74 iterations 3
Cbc0038I Pass  37: suminf.   11.13662 (37) obj. 2747.74 iterations 31
Cbc0038I Pass  38: suminf.    8.33093 (60) obj. 2747.74 iterations 27
Cbc0038I Pass  39: suminf.    8.33093 (60) obj. 2747.74 iterations 3
Cbc0038I Pass  40: suminf.   14.19738 (39) obj. 2747.74 iterations 47
Cbc0038I Pass  41: suminf.   10.36389 (34) obj. 2747.74 iterations 40
Cbc0038I Pass  42: suminf.    8.22184 (59) obj. 2747.74 iterations 22
Cbc0038I Pass  43: suminf.    8.22184 (59) obj. 2747.74 iterations 5
Cbc0038I Pass  44: suminf.    8.22184 (59) obj. 2747.74 iterations 2
Cbc0038I Pass  45: suminf.   20.87455 (71) obj. 2747.74 iterations 118
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 229 integers at bound fixed and 0 continuous
Cbc0038I Full problem 814 rows 473 columns, reduced to 385 rows 212 columns
Cbc0038I Mini branch and bound did not improve solution (0.31 seconds)
Cbc0038I After 0.31 seconds - Feasibility pump exiting with objective of 2895 - took 0.24 seconds
Cbc0012I Integer solution of 2895 found by feasibility pump after 0 iterations and 0 nodes (0.31 seconds)
Cbc0038I Full problem 814 rows 473 columns, reduced to 283 rows 156 columns
Cbc0031I 46 added rows had average density of 121.43478
Cbc0013I At root node, 46 cuts changed objective from 1431.3604 to 1976.7851 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 22 row cuts average 10.5 elements, 0 column cuts (0 active)  in 0.168 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 1816 row cuts average 274.1 elements, 0 column cuts (0 active)  in 0.548 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.256 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 227 row cuts average 133.0 elements, 0 column cuts (0 active)  in 0.075 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 198 row cuts average 13.0 elements, 0 column cuts (0 active)  in 0.233 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 2895 best solution, best possible 1976.7853 (3.68 seconds)
Cbc0001I Search completed - best objective 2895, took 18752 iterations and 28 nodes (5.08 seconds)
Cbc0032I Strong branching done 766 times (31943 iterations), fathomed 6 nodes and fixed 39 variables
Cbc0035I Maximum depth 5, 310 variables fixed on reduced cost
Cuts at root node changed objective from 1431.36 to 1976.79
Probing was tried 100 times and created 22 cuts of which 0 were active after adding rounds of cuts (0.168 seconds)
Gomory was tried 191 times and created 1976 cuts of which 0 were active after adding rounds of cuts (0.598 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.031 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)
MixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.256 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
TwoMirCuts was tried 191 times and created 519 cuts of which 0 were active after adding rounds of cuts (0.156 seconds)
ZeroHalf was tried 191 times and created 316 cuts of which 0 were active after adding rounds of cuts (0.349 seconds)
ImplicationCuts was tried 91 times and created 119 cuts of which 0 were active after adding rounds of cuts (0.043 seconds)

Result - Optimal solution found

Objective value:                2895.00000000
Enumerated nodes:               28
Total iterations:               18752
Time (CPU seconds):             5.11
Time (Wallclock seconds):       5.16

Total time (CPU seconds):       5.11   (Wallclock seconds):       5.16

[2023-04-12T06:59:27Z INFO  he_vectorizer::circ::optimizer] extraction: 5164ms
[2023-04-12T06:59:27Z INFO  he_vectorizer] circuit optimization: 5165ms
[2023-04-12T06:59:27Z INFO  he_vectorizer] plaintext hoisting: 0ms
[2023-04-12T06:59:27Z INFO  he_vectorizer] circuit lowering: 0ms
[2023-04-12T06:59:27Z INFO  he_vectorizer] using pyseal backend for code generation
[2023-04-12T06:59:27Z INFO  he_vectorizer] printed generated code to stdout
def client_pre(wrapper):
    wrapper.client_input("values")
    wrapper.client_input("query")
    wrapper.client_input("keys")
    v_keys_1 = wrapper.build_vector("keys", None, [0, 1], [FilledDim(1, 5, 2, 0, 3, 0, 0), FilledDim(0, 1024, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_keys_1", v_keys_1)
    v_query_1 = wrapper.build_vector("query", None, [1], [FilledDim(0, 5, 2, 0, 3, 0, 0), EmptyDim(1024, 0, 0, 0)])
    wrapper.client_send("v_query_1", v_query_1)
    v_values_1 = wrapper.build_vector("values", None, [0], [FilledDim(0, 1024, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_values_1", v_values_1)
    v_query_2 = wrapper.build_vector("query", None, [0], [FilledDim(0, 5, 2, 0, 3, 0, 0), EmptyDim(1024, 0, 0, 0)])
    wrapper.client_send("v_query_2", v_query_2)
    v_keys_2 = wrapper.build_vector("keys", None, [0, 0], [FilledDim(1, 5, 2, 0, 3, 0, 0), FilledDim(0, 1024, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_keys_2", v_keys_2)

def client_post(wrapper):
    __out = wrapper.client_recv("__out")
    wrapper.client_output(__out)

def server(wrapper):
    v_keys_1 = wrapper.server_recv("v_keys_1")
    v_query_1 = wrapper.server_recv("v_query_1")
    v_values_1 = wrapper.server_recv("v_values_1")
    v_query_2 = wrapper.server_recv("v_query_2")
    v_keys_2 = wrapper.server_recv("v_keys_2")
    const_1 = wrapper.const(1)
    const_neg1 = wrapper.const(-1)
    wrapper.start_server_exec()
    wrapper.encode(const_1, [])
    wrapper.encode(const_neg1, [])
    ct2 = wrapper.ciphertext_array([2], 0)
    wrapper.set(ct2, [0], v_keys_2.get())
    wrapper.set(ct2, [1], v_keys_1.get())
    ct1 = wrapper.ciphertext_array([2], 0)
    wrapper.set(ct1, [0], v_query_2.get())
    wrapper.set(ct1, [1], v_query_1.get())
    mask = wrapper.ciphertext_array([], 0)
    __reduce_1 = wrapper.ciphertext_array([], 1)
    for i5i in range(2):
        instr3 = wrapper.subtract(ct1.get([i5i]), ct2.get([i5i]))
        wrapper.multiply_inplace(instr3, instr3)
        wrapper.relinearize_inplace(instr3)
        wrapper.multiply_plain_inplace(instr3, const_neg1.get())
        wrapper.add_plain_inplace(instr3, const_1.get())
        wrapper.multiply_inplace(instr3, __reduce_1.get())
        wrapper.relinearize_inplace(instr3)
        wrapper.set(__reduce_1, [], instr3)
    
    instr9 = wrapper.rotate_rows(-4096, __reduce_1.get())
    wrapper.multiply_inplace(instr9, __reduce_1.get())
    wrapper.relinearize_inplace(instr9)
    instr11 = wrapper.rotate_rows(-2048, instr9)
    wrapper.multiply_inplace(instr9, instr11)
    wrapper.relinearize_inplace(instr9)
    instr13 = wrapper.rotate_rows(-1024, instr9)
    wrapper.multiply_inplace(instr13, instr9)
    wrapper.relinearize_inplace(instr13)
    wrapper.set(mask, [], instr13)
    __out = wrapper.ciphertext_array([], 0)
    instr17 = wrapper.multiply(v_values_1.get(), mask.get())
    wrapper.relinearize_inplace(instr17)
    instr18 = wrapper.rotate_rows(-512, instr17)
    wrapper.add_inplace(instr17, instr18)
    instr20 = wrapper.rotate_rows(-256, instr17)
    wrapper.add_inplace(instr20, instr17)
    instr22 = wrapper.rotate_rows(-128, instr20)
    wrapper.add_inplace(instr20, instr22)
    instr24 = wrapper.rotate_rows(-64, instr20)
    wrapper.add_inplace(instr24, instr20)
    instr26 = wrapper.rotate_rows(-32, instr24)
    wrapper.add_inplace(instr26, instr24)
    instr28 = wrapper.rotate_rows(-16, instr26)
    wrapper.add_inplace(instr28, instr26)
    instr30 = wrapper.rotate_rows(-8, instr28)
    wrapper.add_inplace(instr28, instr30)
    instr32 = wrapper.rotate_rows(-4, instr28)
    wrapper.add_inplace(instr28, instr32)
    instr34 = wrapper.rotate_rows(-2, instr28)
    wrapper.add_inplace(instr28, instr34)
    instr36 = wrapper.rotate_rows(-1, instr28)
    wrapper.add_inplace(instr28, instr36)
    wrapper.set(__out, [], instr28)
    wrapper.end_server_exec()
    wrapper.server_send("__out", __out)
[2023-04-12T06:59:27Z INFO  he_vectorizer] code generation: 0ms
[2023-04-12T06:59:27Z INFO  he_vectorizer] total compile time: 22029ms
