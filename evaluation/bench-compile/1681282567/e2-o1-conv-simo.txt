[2023-04-12T06:56:07Z INFO  he_vectorizer] parsing: 0ms
[2023-04-12T06:56:07Z INFO  he_vectorizer] elaboration: 0ms
[2023-04-12T06:56:07Z INFO  he_vectorizer::scheduling::scheduler] running scheduler with iter limit: None
[2023-04-12T06:56:07Z INFO  he_vectorizer::scheduling::scheduler] starting scheduler epoch 1
[2023-04-12T06:56:12Z INFO  he_vectorizer::scheduling::scheduler] iteration 1
[2023-04-12T06:56:12Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 5
[2023-04-12T06:56:12Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 5
[2023-04-12T06:56:16Z INFO  he_vectorizer::scheduling::scheduler] iteration 2
[2023-04-12T06:56:16Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 23
[2023-04-12T06:56:16Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 22
[2023-04-12T06:56:17Z INFO  he_vectorizer::scheduling::scheduler] iteration 3
[2023-04-12T06:56:17Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 69
[2023-04-12T06:56:17Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 64
[2023-04-12T06:56:17Z INFO  he_vectorizer::scheduling::scheduler] iteration 4
[2023-04-12T06:56:17Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 139
[2023-04-12T06:56:17Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 59
[2023-04-12T06:56:17Z INFO  he_vectorizer::scheduling::scheduler] iteration 5
[2023-04-12T06:56:17Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 137
[2023-04-12T06:56:17Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T06:56:17Z INFO  he_vectorizer::scheduling::scheduler] iteration 6
[2023-04-12T06:56:17Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 0
[2023-04-12T06:56:17Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T06:56:17Z INFO  he_vectorizer::scheduling::scheduler] starting scheduler epoch 2
[2023-04-12T06:56:21Z INFO  he_vectorizer::scheduling::scheduler] iteration 7
[2023-04-12T06:56:21Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 1018
[2023-04-12T06:56:21Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 72
[2023-04-12T06:57:05Z INFO  he_vectorizer::scheduling::scheduler] iteration 8
[2023-04-12T06:57:05Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 2437
[2023-04-12T06:57:05Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 720
[2023-04-12T06:57:34Z INFO  he_vectorizer::scheduling::scheduler] iteration 9
[2023-04-12T06:57:34Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 2703
[2023-04-12T06:57:34Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 1001
[2023-04-12T06:57:44Z INFO  he_vectorizer::scheduling::scheduler] iteration 10
[2023-04-12T06:57:44Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 2251
[2023-04-12T06:57:44Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 829
[2023-04-12T06:57:45Z INFO  he_vectorizer::scheduling::scheduler] iteration 11
[2023-04-12T06:57:45Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 1564
[2023-04-12T06:57:45Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 465
[2023-04-12T06:57:45Z INFO  he_vectorizer::scheduling::scheduler] iteration 12
[2023-04-12T06:57:45Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 675
[2023-04-12T06:57:45Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 99
[2023-04-12T06:57:45Z INFO  he_vectorizer::scheduling::scheduler] iteration 13
[2023-04-12T06:57:45Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 0
[2023-04-12T06:57:45Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T06:57:45Z INFO  he_vectorizer::scheduling::scheduler] inline scheduler 1 total visited schedules: 11023
[2023-04-12T06:57:45Z INFO  he_vectorizer] scheduling: 98379ms
[2023-04-12T06:57:45Z INFO  he_vectorizer] circuit generation: 0ms
[2023-04-12T06:57:45Z INFO  he_vectorizer::circ::optimizer] Runner report
    =============
      Stop reason: Saturated
      Iterations: 5
      Egraph size: 46 nodes, 20 classes, 81 memo
      Rebuilds: 8
      Total time: 0.000343411
        Search:  (0.33) 0.000114773
        Apply:   (0.45) 0.00015565000000000002
        Rebuild: (0.21) 0.000071896
    
[2023-04-12T06:57:45Z INFO  he_vectorizer::circ::optimizer] equality saturation: 0ms
[2023-04-12T06:57:45Z INFO  he_vectorizer::circ::optimizer] using LP extractor to derive optimized program...
[/home/rolph/.cargo/registry/src/index.crates.io-6f17d22bba15001f/egg-0.9.0/src/lp_extract.rs:137] max_order = 460.0
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Mar 24 2020 

command line - Cbc_C_Interface -solve -quit (default strategy 1)
Continuous objective value is 99.8333 - 0.00 seconds
Cgl0003I 6 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 1 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 6 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 5 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 15 rows, 19 columns (19 integer (19 of which binary)) and 35 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0038I Initial state - 0 integers unsatisfied sum - 0
Cbc0038I Solution found of 226
Cbc0038I Before mini branch and bound, 19 integers at bound fixed and 0 continuous
Cbc0038I Mini branch and bound did not improve solution (0.00 seconds)
Cbc0038I After 0.00 seconds - Feasibility pump exiting with objective of 226 - took 0.00 seconds
Cbc0012I Integer solution of 226 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)
Cbc0001I Search completed - best objective 226, took 0 iterations and 0 nodes (0.00 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 226 to 226
Probing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Gomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Knapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Clique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                226.00000000
Enumerated nodes:               0
Total iterations:               0
Time (CPU seconds):             0.00
Time (Wallclock seconds):       0.00

Total time (CPU seconds):       0.00   (Wallclock seconds):       0.00

[2023-04-12T06:57:45Z INFO  he_vectorizer::circ::optimizer] extraction: 3ms
[2023-04-12T06:57:45Z INFO  he_vectorizer] circuit optimization: 4ms
[2023-04-12T06:57:45Z INFO  he_vectorizer] plaintext hoisting: 0ms
[2023-04-12T06:57:45Z INFO  he_vectorizer] circuit lowering: 0ms
[2023-04-12T06:57:45Z INFO  he_vectorizer] using pyseal backend for code generation
[2023-04-12T06:57:45Z INFO  he_vectorizer] printed generated code to stdout
def client_pre(wrapper):
    wrapper.client_input("img")
    v_img_1 = wrapper.build_vector("img", None, [0, 0], [EmptyDim(4, 0, 0, 0), FilledDim(1, 32, 1, 0, 0, 0, 0), FilledDim(0, 32, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_img_1", v_img_1)

def client_post(wrapper):
    __out = wrapper.client_recv("__out")
    wrapper.client_output(__out)

def server(wrapper):
    wrapper.server_input("filter")
    v_filter_1 = wrapper.build_vector("filter", None, [0, 1, 1], [FilledDim(0, 4, 1, 0, 0, 0, 0), EmptyDim(30, 0, 0, 2), EmptyDim(30, 0, 0, 2)])
    v_filter_2 = wrapper.build_vector("filter", None, [0, 0, 2], [FilledDim(0, 4, 1, 0, 0, 0, 0), EmptyDim(30, 0, 0, 2), EmptyDim(30, 0, 0, 2)])
    v_filter_3 = wrapper.build_vector("filter", None, [0, 0, 1], [FilledDim(0, 4, 1, 0, 0, 0, 0), EmptyDim(30, 0, 0, 2), EmptyDim(30, 0, 0, 2)])
    v_filter_4 = wrapper.build_vector("filter", None, [0, 2, 1], [FilledDim(0, 4, 1, 0, 0, 0, 0), EmptyDim(30, 0, 0, 2), EmptyDim(30, 0, 0, 2)])
    v_filter_5 = wrapper.build_vector("filter", None, [0, 2, 0], [FilledDim(0, 4, 1, 0, 0, 0, 0), EmptyDim(30, 0, 0, 2), EmptyDim(30, 0, 0, 2)])
    v_filter_6 = wrapper.build_vector("filter", None, [0, 2, 2], [FilledDim(0, 4, 1, 0, 0, 0, 0), EmptyDim(30, 0, 0, 2), EmptyDim(30, 0, 0, 2)])
    v_filter_7 = wrapper.build_vector("filter", None, [0, 1, 2], [FilledDim(0, 4, 1, 0, 0, 0, 0), EmptyDim(30, 0, 0, 2), EmptyDim(30, 0, 0, 2)])
    v_filter_8 = wrapper.build_vector("filter", None, [0, 1, 0], [FilledDim(0, 4, 1, 0, 0, 0, 0), EmptyDim(30, 0, 0, 2), EmptyDim(30, 0, 0, 2)])
    v_filter_9 = wrapper.build_vector("filter", None, [0, 0, 0], [FilledDim(0, 4, 1, 0, 0, 0, 0), EmptyDim(30, 0, 0, 2), EmptyDim(30, 0, 0, 2)])
    v_img_1 = wrapper.server_recv("v_img_1")
    const_neg1 = wrapper.const(-1)
    mask_1 = wrapper.mask([(4, 0, 3), (32, 0, 30), (32, 0, 30)])
    wrapper.start_server_exec()
    pt2 = wrapper.plaintext_array([3, 3], 0)
    wrapper.set(pt2, [0, 0], v_filter_9.get())
    wrapper.set(pt2, [0, 1], v_filter_8.get())
    wrapper.set(pt2, [0, 2], v_filter_5.get())
    wrapper.set(pt2, [1, 0], v_filter_3.get())
    wrapper.set(pt2, [1, 1], v_filter_1.get())
    wrapper.set(pt2, [1, 2], v_filter_4.get())
    wrapper.set(pt2, [2, 0], v_filter_2.get())
    wrapper.set(pt2, [2, 1], v_filter_7.get())
    wrapper.set(pt2, [2, 2], v_filter_6.get())
    __partial_1 = wrapper.native_array([3, 3], 0)
    for i1 in range(3):
        for i4 in range(3):
            instr2 = wrapper.multiply_native(mask_1.get(), pt2.get([i4, i1]))
            wrapper.set(__partial_1, [i1, i4], instr2)
        
    
    wrapper.encode(const_neg1, [])
    for i1 in range(3):
        for i4 in range(3):
            wrapper.encode(__partial_1, [i1, i4])
        
    
    __out = wrapper.ciphertext_array([], 0)
    __reduce_2 = wrapper.ciphertext_array([], 0)
    for i1 in range(3):
        __reduce_1 = wrapper.ciphertext_array([], 0)
        for i4 in range(3):
            instr5 = wrapper.rotate_rows(((-32 * i4) + (-1 * i1)), v_img_1.get())
            wrapper.multiply_plain_inplace(instr5, __partial_1.get([i1, i4]))
            wrapper.add_inplace(instr5, __reduce_1.get())
            wrapper.set(__reduce_1, [], instr5)
        
        instr9 = wrapper.add(__reduce_2.get(), __reduce_1.get())
        wrapper.set(__reduce_2, [], instr9)
    
    wrapper.set(__out, [], __reduce_2.get())
    wrapper.end_server_exec()
    wrapper.server_send("__out", __out)
[2023-04-12T06:57:45Z INFO  he_vectorizer] code generation: 0ms
[2023-04-12T06:57:45Z INFO  he_vectorizer] total compile time: 98384ms
