[2023-04-12T06:59:27Z INFO  he_vectorizer] parsing: 0ms
[2023-04-12T06:59:27Z INFO  he_vectorizer] elaboration: 0ms
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] running scheduler with iter limit: None
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] starting scheduler epoch 1
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] iteration 1
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 3
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 1
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] iteration 2
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 4
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 1
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] iteration 3
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 2
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 1
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] iteration 4
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 0
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] starting scheduler epoch 2
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] iteration 5
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 62
[2023-04-12T06:59:27Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 3
[2023-04-12T06:59:28Z INFO  he_vectorizer::scheduling::scheduler] iteration 6
[2023-04-12T06:59:28Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 176
[2023-04-12T06:59:28Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 6
[2023-04-12T06:59:28Z INFO  he_vectorizer::scheduling::scheduler] iteration 7
[2023-04-12T06:59:28Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 180
[2023-04-12T06:59:28Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 1
[2023-04-12T06:59:28Z INFO  he_vectorizer::scheduling::scheduler] iteration 8
[2023-04-12T06:59:28Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 81
[2023-04-12T06:59:28Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 4
[2023-04-12T06:59:28Z INFO  he_vectorizer::scheduling::scheduler] iteration 9
[2023-04-12T06:59:28Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 0
[2023-04-12T06:59:28Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T06:59:28Z INFO  he_vectorizer::scheduling::scheduler] inline scheduler 1 total visited schedules: 510
[2023-04-12T06:59:28Z INFO  he_vectorizer] scheduling: 800ms
[2023-04-12T06:59:28Z INFO  he_vectorizer] circuit generation: 0ms
[2023-04-12T06:59:28Z INFO  he_vectorizer::circ::optimizer] Runner report
    =============
      Stop reason: NodeLimit(1488)
      Iterations: 3
      Egraph size: 1460 nodes, 680 classes, 1488 memo
      Rebuilds: 0
      Total time: 0.001978409
        Search:  (0.26) 0.000510644
        Apply:   (0.68) 0.001342606
        Rebuild: (0.06) 0.000124408
    
[2023-04-12T06:59:28Z INFO  he_vectorizer::circ::optimizer] equality saturation: 2ms
[2023-04-12T06:59:28Z INFO  he_vectorizer::circ::optimizer] using LP extractor to derive optimized program...
[/home/rolph/.cargo/registry/src/index.crates.io-6f17d22bba15001f/egg-0.9.0/src/lp_extract.rs:137] max_order = 14600.0
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Mar 24 2020 

command line - Cbc_C_Interface -solve -quit (default strategy 1)
Continuous objective value is 597.679 - 0.06 seconds
Cgl0003I 1 fixed, 0 tightened bounds, 663 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 197 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 29 tightened bounds, 396 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 8 tightened bounds, 242 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 7 tightened bounds, 124 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 6 tightened bounds, 80 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 2 tightened bounds, 58 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 53 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 1 tightened bounds, 46 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 1 tightened bounds, 36 strengthened rows, 0 substitutions
Cgl0004I processed model has 2775 rows, 1519 columns (1519 integer (1519 of which binary)) and 7495 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0038I Initial state - 310 integers unsatisfied sum - 18.5945
Cbc0038I Pass   1: suminf.   14.26132 (323) obj. 1103.66 iterations 585
Cbc0038I Pass   2: suminf.   14.13632 (319) obj. 1141.16 iterations 7
Cbc0038I Pass   3: suminf.   15.21966 (307) obj. 1358.1 iterations 20
Cbc0038I Pass   4: suminf.   13.76727 (330) obj. 1197.38 iterations 23
Cbc0038I Pass   5: suminf.   10.55803 (273) obj. 2456.26 iterations 341
Cbc0038I Pass   6: suminf.    9.62875 (252) obj. 2550.88 iterations 73
Cbc0038I Pass   7: suminf.    5.62875 (240) obj. 2756.22 iterations 8
Cbc0038I Pass   8: suminf.    5.62875 (240) obj. 2756.22 iterations 1
Cbc0038I Pass   9: suminf.    6.54567 (167) obj. 2796.5 iterations 274
Cbc0038I Pass  10: suminf.    5.50492 (237) obj. 2755.94 iterations 258
Cbc0038I Pass  11: suminf.    6.16838 (153) obj. 3142.44 iterations 236
Cbc0038I Pass  12: suminf.    5.72835 (141) obj. 3138.49 iterations 26
Cbc0038I Pass  13: suminf.    8.35714 (101) obj. 3357.81 iterations 166
Cbc0038I Pass  14: suminf.    5.83333 (72) obj. 3273.39 iterations 106
Cbc0038I Pass  15: suminf.    5.87500 (25) obj. 3753.62 iterations 130
Cbc0038I Pass  16: suminf.    5.42857 (24) obj. 3796.57 iterations 25
Cbc0038I Pass  17: suminf.    0.00000 (0) obj. 4070 iterations 32
Cbc0038I Solution found of 4070
Cbc0038I Rounding solution of 4062 is better than previous of 4070

Cbc0038I Before mini branch and bound, 992 integers at bound fixed and 0 continuous
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 868 rows 470 columns
Cbc0038I Mini branch and bound improved solution from 4062 to 2770 (1.04 seconds)
Cbc0038I Round again with cutoff of 2595.51
Cbc0038I Pass  18: suminf.   14.26132 (323) obj. 1103.66 iterations 0
Cbc0038I Pass  19: suminf.   14.13632 (319) obj. 1141.16 iterations 8
Cbc0038I Pass  20: suminf.   14.13632 (319) obj. 1141.16 iterations 12
Cbc0038I Pass  21: suminf.   13.95251 (355) obj. 1148.67 iterations 73
Cbc0038I Pass  22: suminf.   10.55803 (273) obj. 2036.26 iterations 614
Cbc0038I Pass  23: suminf.    9.62875 (252) obj. 2130.88 iterations 92
Cbc0038I Pass  24: suminf.   12.36417 (160) obj. 2489.74 iterations 372
Cbc0038I Pass  25: suminf.    6.90592 (152) obj. 2595.51 iterations 103
Cbc0038I Pass  26: suminf.    5.72835 (141) obj. 2478.49 iterations 69
Cbc0038I Pass  27: suminf.    6.41818 (64) obj. 2523.51 iterations 177
Cbc0038I Pass  28: suminf.   57.85227 (187) obj. 2595.51 iterations 666
Cbc0038I Pass  29: suminf.   14.86439 (55) obj. 2595.51 iterations 450
Cbc0038I Pass  30: suminf.   14.36439 (53) obj. 2595.51 iterations 28
Cbc0038I Pass  31: suminf.   14.36439 (53) obj. 2595.51 iterations 4
Cbc0038I Pass  32: suminf.   14.36439 (53) obj. 2595.51 iterations 3
Cbc0038I Pass  33: suminf.   14.36439 (53) obj. 2595.51 iterations 3
Cbc0038I Pass  34: suminf.   31.40509 (88) obj. 2595.51 iterations 381
Cbc0038I Pass  35: suminf.   10.20000 (28) obj. 2550.4 iterations 352
Cbc0038I Pass  36: suminf.   10.12500 (35) obj. 2541.62 iterations 26
Cbc0038I Pass  37: suminf.    9.22693 (35) obj. 2595.51 iterations 21
Cbc0038I Pass  38: suminf.    9.22693 (35) obj. 2595.51 iterations 37
Cbc0038I Pass  39: suminf.    9.22693 (35) obj. 2595.51 iterations 2
Cbc0038I Pass  40: suminf.    9.22693 (35) obj. 2595.51 iterations 7
Cbc0038I Pass  41: suminf.    9.22693 (35) obj. 2595.51 iterations 4
Cbc0038I Pass  42: suminf.    9.22693 (35) obj. 2595.51 iterations 2
Cbc0038I Pass  43: suminf.    9.22693 (35) obj. 2595.51 iterations 7
Cbc0038I Pass  44: suminf.   14.29623 (30) obj. 2595.51 iterations 310
Cbc0038I Pass  45: suminf.   11.00903 (70) obj. 2595.51 iterations 258
Cbc0038I Pass  46: suminf.   10.82873 (64) obj. 2595.51 iterations 2
Cbc0038I Pass  47: suminf.   11.53982 (60) obj. 2595.51 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 862 integers at bound fixed and 0 continuous
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 1010 rows 538 columns
Cbc0038I Mini branch and bound improved solution from 2770 to 2522 (1.78 seconds)
Cbc0038I Round again with cutoff of 2223.62
Cbc0038I Pass  47: suminf.   14.26132 (323) obj. 1103.66 iterations 0
Cbc0038I Pass  48: suminf.   14.13632 (319) obj. 1141.16 iterations 8
Cbc0038I Pass  49: suminf.   14.13632 (319) obj. 1141.16 iterations 12
Cbc0038I Pass  50: suminf.   13.95251 (355) obj. 1148.67 iterations 73
Cbc0038I Pass  51: suminf.   12.57552 (322) obj. 2036.13 iterations 553
Cbc0038I Pass  52: suminf.    9.88632 (293) obj. 2018.77 iterations 264
Cbc0038I Pass  53: suminf.    9.55299 (292) obj. 2019.1 iterations 4
Cbc0038I Pass  54: suminf.    8.17796 (212) obj. 2223.62 iterations 701
Cbc0038I Pass  55: suminf.    5.62875 (240) obj. 2180.22 iterations 447
Cbc0038I Pass  56: suminf.    7.63894 (166) obj. 2223.62 iterations 389
Cbc0038I Pass  57: suminf.    5.50492 (237) obj. 2179.94 iterations 327
Cbc0038I Pass  58: suminf.    6.85678 (150) obj. 2223.62 iterations 382
Cbc0038I Pass  59: suminf.    6.85678 (150) obj. 2223.62 iterations 12
Cbc0038I Pass  60: suminf.   11.20548 (130) obj. 2003.49 iterations 218
Cbc0038I Pass  61: suminf.    9.83333 (80) obj. 2079.39 iterations 135
Cbc0038I Pass  62: suminf.    9.83333 (80) obj. 2079.39 iterations 3
Cbc0038I Pass  63: suminf.   55.50287 (196) obj. 2223.62 iterations 669
Cbc0038I Pass  64: suminf.   15.18182 (80) obj. 2089.18 iterations 541
Cbc0038I Pass  65: suminf.   15.18182 (80) obj. 2089.18 iterations 30
Cbc0038I Pass  66: suminf.   15.50491 (46) obj. 2223.62 iterations 143
Cbc0038I Pass  67: suminf.   14.50580 (67) obj. 2223.62 iterations 93
Cbc0038I Pass  68: suminf.   14.50580 (67) obj. 2223.62 iterations 31
Cbc0038I Pass  69: suminf.   14.50580 (67) obj. 2223.62 iterations 5
Cbc0038I Pass  70: suminf.   15.50171 (61) obj. 2223.62 iterations 42
Cbc0038I Pass  71: suminf.   11.86731 (71) obj. 2223.62 iterations 66
Cbc0038I Pass  72: suminf.   10.71971 (95) obj. 2223.62 iterations 92
Cbc0038I Pass  73: suminf.    7.49594 (55) obj. 2223.62 iterations 99
Cbc0038I Pass  74: suminf.    6.61007 (69) obj. 2223.62 iterations 99
Cbc0038I Pass  75: suminf.    9.48739 (64) obj. 2223.62 iterations 113
Cbc0038I Pass  76: suminf.    6.48598 (68) obj. 2223.62 iterations 111
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 894 integers at bound fixed and 0 continuous
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 999 rows 540 columns
Cbc0038I Mini branch and bound did not improve solution (2.59 seconds)
Cbc0038I After 2.59 seconds - Feasibility pump exiting with objective of 2522 - took 2.17 seconds
Cbc0012I Integer solution of 2522 found by feasibility pump after 0 iterations and 0 nodes (2.59 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 460 rows 255 columns
Cbc0012I Integer solution of 2518 found by RINS after 0 iterations and 0 nodes (2.67 seconds)
Cbc0031I 53 added rows had average density of 174.79245
Cbc0013I At root node, 53 cuts changed objective from 1034.0902 to 1491.4257 in 39 passes
Cbc0014I Cut generator 0 (Probing) - 25 row cuts average 13.5 elements, 0 column cuts (0 active)  in 0.181 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 623 row cuts average 354.4 elements, 0 column cuts (0 active)  in 0.670 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.041 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 2 row cuts average 117.5 elements, 0 column cuts (0 active)  in 0.315 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 217 row cuts average 140.6 elements, 0 column cuts (0 active)  in 0.201 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 97 row cuts average 38.0 elements, 0 column cuts (0 active)  in 0.488 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 2518 best solution, best possible 1493.0406 (6.18 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 185 rows 104 columns
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 239 rows 126 columns
Cbc0010I After 100 nodes, 51 on tree, 2518 best solution, best possible 1493.0406 (14.34 seconds)
Cbc0010I After 200 nodes, 80 on tree, 2518 best solution, best possible 1493.0406 (15.98 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 86 rows 49 columns
Cbc0010I After 300 nodes, 116 on tree, 2518 best solution, best possible 1493.0406 (19.08 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 134 rows 79 columns
Cbc0010I After 400 nodes, 134 on tree, 2518 best solution, best possible 1493.0406 (21.62 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 46 rows 35 columns
Cbc0010I After 500 nodes, 148 on tree, 2518 best solution, best possible 1493.0406 (24.47 seconds)
Cbc0010I After 600 nodes, 174 on tree, 2518 best solution, best possible 1493.0406 (26.57 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 184 rows 103 columns
Cbc0010I After 700 nodes, 184 on tree, 2518 best solution, best possible 1493.0406 (28.19 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 140 rows 92 columns
Cbc0010I After 800 nodes, 217 on tree, 2518 best solution, best possible 1493.0406 (30.49 seconds)
Cbc0010I After 900 nodes, 238 on tree, 2518 best solution, best possible 1493.0406 (32.76 seconds)
Cbc0010I After 1000 nodes, 259 on tree, 2518 best solution, best possible 1493.0406 (34.98 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 407 rows 221 columns
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 184 rows 125 columns
Cbc0010I After 1100 nodes, 264 on tree, 2518 best solution, best possible 1493.0406 (36.45 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 241 rows 138 columns
Cbc0010I After 1200 nodes, 262 on tree, 2518 best solution, best possible 1493.0406 (37.77 seconds)
Cbc0010I After 1300 nodes, 247 on tree, 2518 best solution, best possible 1493.0406 (39.03 seconds)
Cbc0010I After 1400 nodes, 230 on tree, 2518 best solution, best possible 1493.0406 (40.05 seconds)
Cbc0010I After 1500 nodes, 219 on tree, 2518 best solution, best possible 1493.0406 (41.17 seconds)
Cbc0010I After 1600 nodes, 202 on tree, 2518 best solution, best possible 1493.0406 (42.33 seconds)
Cbc0010I After 1700 nodes, 198 on tree, 2518 best solution, best possible 1493.0406 (43.78 seconds)
Cbc0010I After 1800 nodes, 186 on tree, 2518 best solution, best possible 1493.0406 (45.10 seconds)
Cbc0010I After 1900 nodes, 177 on tree, 2518 best solution, best possible 1493.0406 (46.34 seconds)
Cbc0010I After 2000 nodes, 172 on tree, 2518 best solution, best possible 1493.0406 (47.61 seconds)
Cbc0010I After 2100 nodes, 163 on tree, 2518 best solution, best possible 1493.0406 (48.96 seconds)
Cbc0010I After 2200 nodes, 161 on tree, 2518 best solution, best possible 1493.0406 (50.27 seconds)
Cbc0010I After 2300 nodes, 154 on tree, 2518 best solution, best possible 1493.0406 (51.45 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 202 rows 123 columns
Cbc0010I After 2400 nodes, 150 on tree, 2518 best solution, best possible 1493.0406 (52.91 seconds)
Cbc0010I After 2500 nodes, 145 on tree, 2518 best solution, best possible 1493.0406 (54.23 seconds)
Cbc0010I After 2600 nodes, 142 on tree, 2518 best solution, best possible 1493.0406 (55.84 seconds)
Cbc0010I After 2700 nodes, 140 on tree, 2518 best solution, best possible 1493.0406 (57.51 seconds)
Cbc0010I After 2800 nodes, 133 on tree, 2518 best solution, best possible 1493.0406 (59.26 seconds)
Cbc0010I After 2900 nodes, 127 on tree, 2518 best solution, best possible 1493.0406 (60.66 seconds)
Cbc0010I After 3000 nodes, 120 on tree, 2518 best solution, best possible 1493.0406 (62.00 seconds)
Cbc0010I After 3100 nodes, 118 on tree, 2518 best solution, best possible 1493.0406 (63.55 seconds)
Cbc0010I After 3200 nodes, 118 on tree, 2518 best solution, best possible 1493.0406 (65.32 seconds)
Cbc0010I After 3300 nodes, 114 on tree, 2518 best solution, best possible 1493.0406 (67.21 seconds)
Cbc0010I After 3400 nodes, 115 on tree, 2518 best solution, best possible 1493.0406 (68.73 seconds)
Cbc0010I After 3500 nodes, 107 on tree, 2518 best solution, best possible 1493.0406 (70.17 seconds)
Cbc0010I After 3600 nodes, 110 on tree, 2518 best solution, best possible 1493.0406 (71.79 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 99 rows 65 columns
Cbc0012I Integer solution of 2514 found by RINS after 303268 iterations and 3602 nodes (71.82 seconds)
Cbc0010I After 3700 nodes, 140 on tree, 2514 best solution, best possible 1493.0406 (74.60 seconds)
Cbc0010I After 3800 nodes, 159 on tree, 2514 best solution, best possible 1493.0406 (76.60 seconds)
Cbc0010I After 3900 nodes, 173 on tree, 2514 best solution, best possible 1493.0406 (78.44 seconds)
Cbc0010I After 4000 nodes, 190 on tree, 2514 best solution, best possible 1493.0406 (80.79 seconds)
Cbc0010I After 4100 nodes, 205 on tree, 2514 best solution, best possible 1493.0406 (82.72 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 103 rows 70 columns
Cbc0010I After 4200 nodes, 222 on tree, 2514 best solution, best possible 1493.0406 (84.62 seconds)
Cbc0010I After 4300 nodes, 243 on tree, 2514 best solution, best possible 1493.0406 (86.60 seconds)
Cbc0010I After 4400 nodes, 262 on tree, 2514 best solution, best possible 1493.0406 (88.70 seconds)
Cbc0010I After 4500 nodes, 270 on tree, 2514 best solution, best possible 1493.0406 (90.20 seconds)
Cbc0010I After 4600 nodes, 277 on tree, 2514 best solution, best possible 1493.0406 (92.03 seconds)
Cbc0010I After 4700 nodes, 283 on tree, 2514 best solution, best possible 1493.0406 (93.59 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 176 rows 98 columns
Cbc0010I After 4800 nodes, 302 on tree, 2514 best solution, best possible 1493.0406 (95.54 seconds)
Cbc0010I After 4900 nodes, 328 on tree, 2514 best solution, best possible 1493.0406 (97.61 seconds)
Cbc0010I After 5000 nodes, 338 on tree, 2514 best solution, best possible 1493.0406 (99.13 seconds)
Cbc0010I After 5100 nodes, 339 on tree, 2514 best solution, best possible 1493.0406 (100.58 seconds)
Cbc0010I After 5200 nodes, 338 on tree, 2514 best solution, best possible 1493.0406 (102.26 seconds)
Cbc0010I After 5300 nodes, 327 on tree, 2514 best solution, best possible 1493.0406 (103.70 seconds)
Cbc0010I After 5400 nodes, 300 on tree, 2514 best solution, best possible 1493.0406 (104.94 seconds)
Cbc0010I After 5500 nodes, 274 on tree, 2514 best solution, best possible 1493.0406 (106.23 seconds)
Cbc0010I After 5600 nodes, 262 on tree, 2514 best solution, best possible 1493.0406 (107.72 seconds)
Cbc0010I After 5700 nodes, 230 on tree, 2514 best solution, best possible 1493.0406 (109.00 seconds)
Cbc0010I After 5800 nodes, 216 on tree, 2514 best solution, best possible 1493.0406 (110.48 seconds)
Cbc0010I After 5900 nodes, 205 on tree, 2514 best solution, best possible 1493.0406 (111.95 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 156 rows 97 columns
Cbc0010I After 6000 nodes, 196 on tree, 2514 best solution, best possible 1493.0406 (113.54 seconds)
Cbc0010I After 6100 nodes, 190 on tree, 2514 best solution, best possible 1493.0406 (115.22 seconds)
Cbc0010I After 6200 nodes, 180 on tree, 2514 best solution, best possible 1493.0406 (116.97 seconds)
Cbc0010I After 6300 nodes, 173 on tree, 2514 best solution, best possible 1493.0406 (118.75 seconds)
Cbc0010I After 6400 nodes, 163 on tree, 2514 best solution, best possible 1493.0406 (120.18 seconds)
Cbc0010I After 6500 nodes, 157 on tree, 2514 best solution, best possible 1493.0406 (121.95 seconds)
Cbc0010I After 6600 nodes, 147 on tree, 2514 best solution, best possible 1493.0406 (123.55 seconds)
Cbc0010I After 6700 nodes, 136 on tree, 2514 best solution, best possible 1493.0406 (125.29 seconds)
Cbc0010I After 6800 nodes, 126 on tree, 2514 best solution, best possible 1493.0406 (127.05 seconds)
Cbc0010I After 6900 nodes, 121 on tree, 2514 best solution, best possible 1493.0406 (128.69 seconds)
Cbc0010I After 7000 nodes, 109 on tree, 2514 best solution, best possible 1493.0406 (130.30 seconds)
Cbc0010I After 7100 nodes, 106 on tree, 2514 best solution, best possible 1493.0406 (132.12 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 323 rows 175 columns
Cbc0010I After 7200 nodes, 93 on tree, 2514 best solution, best possible 1493.0406 (134.33 seconds)
Cbc0010I After 7300 nodes, 89 on tree, 2514 best solution, best possible 1493.0406 (136.29 seconds)
Cbc0010I After 7400 nodes, 92 on tree, 2514 best solution, best possible 1493.0406 (138.51 seconds)
Cbc0010I After 7500 nodes, 89 on tree, 2514 best solution, best possible 1493.0406 (140.14 seconds)
Cbc0010I After 7600 nodes, 91 on tree, 2514 best solution, best possible 1493.0406 (142.13 seconds)
Cbc0010I After 7700 nodes, 89 on tree, 2514 best solution, best possible 1493.0406 (144.02 seconds)
Cbc0010I After 7800 nodes, 82 on tree, 2514 best solution, best possible 1493.0406 (146.07 seconds)
Cbc0010I After 7900 nodes, 76 on tree, 2514 best solution, best possible 1493.0406 (147.92 seconds)
Cbc0010I After 8000 nodes, 74 on tree, 2514 best solution, best possible 1493.0406 (149.47 seconds)
Cbc0010I After 8100 nodes, 70 on tree, 2514 best solution, best possible 1493.0406 (151.08 seconds)
Cbc0010I After 8200 nodes, 62 on tree, 2514 best solution, best possible 1493.0406 (152.68 seconds)
Cbc0010I After 8300 nodes, 64 on tree, 2514 best solution, best possible 1493.0406 (154.25 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 153 rows 96 columns
Cbc0010I After 8400 nodes, 57 on tree, 2514 best solution, best possible 1493.0406 (155.98 seconds)
Cbc0010I After 8500 nodes, 57 on tree, 2514 best solution, best possible 1493.0406 (157.55 seconds)
Cbc0010I After 8600 nodes, 53 on tree, 2514 best solution, best possible 1493.0406 (159.49 seconds)
Cbc0010I After 8700 nodes, 53 on tree, 2514 best solution, best possible 1493.0406 (161.19 seconds)
Cbc0010I After 8800 nodes, 51 on tree, 2514 best solution, best possible 1493.0406 (163.14 seconds)
Cbc0010I After 8900 nodes, 53 on tree, 2514 best solution, best possible 1493.0406 (164.94 seconds)
Cbc0010I After 9000 nodes, 48 on tree, 2514 best solution, best possible 1493.0406 (166.36 seconds)
Cbc0010I After 9100 nodes, 49 on tree, 2514 best solution, best possible 1493.0406 (167.78 seconds)
Cbc0010I After 9200 nodes, 48 on tree, 2514 best solution, best possible 1493.0406 (169.42 seconds)
Cbc0010I After 9300 nodes, 43 on tree, 2514 best solution, best possible 1493.0406 (170.89 seconds)
Cbc0010I After 9400 nodes, 42 on tree, 2514 best solution, best possible 1493.0406 (172.25 seconds)
Cbc0010I After 9500 nodes, 40 on tree, 2514 best solution, best possible 1493.0406 (173.97 seconds)
Cbc0010I After 9600 nodes, 37 on tree, 2514 best solution, best possible 1493.0406 (175.53 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 282 rows 175 columns
Cbc0010I After 9700 nodes, 35 on tree, 2514 best solution, best possible 1493.0406 (177.25 seconds)
Cbc0010I After 9800 nodes, 35 on tree, 2514 best solution, best possible 1493.0406 (179.05 seconds)
Cbc0010I After 9900 nodes, 31 on tree, 2514 best solution, best possible 1493.0406 (180.46 seconds)
Cbc0010I After 10000 nodes, 33 on tree, 2514 best solution, best possible 1493.0406 (182.05 seconds)
Cbc0010I After 10100 nodes, 32 on tree, 2514 best solution, best possible 1493.0406 (184.02 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 116 rows 70 columns
Cbc0010I After 10200 nodes, 31 on tree, 2514 best solution, best possible 1493.0406 (185.74 seconds)
Cbc0010I After 10300 nodes, 28 on tree, 2514 best solution, best possible 1493.0406 (187.28 seconds)
Cbc0010I After 10400 nodes, 24 on tree, 2514 best solution, best possible 1493.0406 (189.07 seconds)
Cbc0010I After 10500 nodes, 20 on tree, 2514 best solution, best possible 1493.0406 (190.67 seconds)
Cbc0010I After 10600 nodes, 23 on tree, 2514 best solution, best possible 1493.0406 (192.66 seconds)
Cbc0010I After 10700 nodes, 23 on tree, 2514 best solution, best possible 1493.0406 (194.38 seconds)
Cbc0038I Full problem 2775 rows 1519 columns, reduced to 145 rows 92 columns
Cbc0010I After 10800 nodes, 26 on tree, 2514 best solution, best possible 1493.0406 (196.39 seconds)
Cbc0010I After 10900 nodes, 17 on tree, 2514 best solution, best possible 1493.0406 (197.92 seconds)
Cbc0010I After 11000 nodes, 21 on tree, 2514 best solution, best possible 1493.0406 (199.81 seconds)
Cbc0010I After 11100 nodes, 61 on tree, 2514 best solution, best possible 1985.3532 (208.86 seconds)
Cbc0010I After 11200 nodes, 105 on tree, 2514 best solution, best possible 2082.6889 (213.25 seconds)
Cbc0010I After 11300 nodes, 148 on tree, 2514 best solution, best possible 2132.7832 (217.18 seconds)
Cbc0010I After 11400 nodes, 180 on tree, 2514 best solution, best possible 2182.2048 (220.19 seconds)
Cbc0010I After 11500 nodes, 217 on tree, 2514 best solution, best possible 2213.6167 (223.83 seconds)
Cbc0010I After 11600 nodes, 252 on tree, 2514 best solution, best possible 2241.5884 (226.51 seconds)
Cbc0010I After 11700 nodes, 273 on tree, 2514 best solution, best possible 2265 (228.86 seconds)
Cbc0010I After 11800 nodes, 288 on tree, 2514 best solution, best possible 2294.8594 (231.44 seconds)
Cbc0010I After 11900 nodes, 317 on tree, 2514 best solution, best possible 2312.6667 (233.80 seconds)
Cbc0010I After 12000 nodes, 343 on tree, 2514 best solution, best possible 2322.7037 (235.66 seconds)
Cbc0010I After 12100 nodes, 357 on tree, 2514 best solution, best possible 2331.7167 (237.61 seconds)
Cbc0010I After 12200 nodes, 383 on tree, 2514 best solution, best possible 2345.8 (239.79 seconds)
Cbc0010I After 12300 nodes, 405 on tree, 2514 best solution, best possible 2358.86 (241.75 seconds)
Cbc0010I After 12400 nodes, 423 on tree, 2514 best solution, best possible 2371.5 (243.70 seconds)
Cbc0010I After 12500 nodes, 420 on tree, 2514 best solution, best possible 2389.6497 (245.52 seconds)
Cbc0010I After 12600 nodes, 415 on tree, 2514 best solution, best possible 2409.1842 (247.17 seconds)
Cbc0010I After 12700 nodes, 415 on tree, 2514 best solution, best possible 2420.5486 (248.89 seconds)
Cbc0010I After 12800 nodes, 416 on tree, 2514 best solution, best possible 2427.375 (250.39 seconds)
Cbc0010I After 12900 nodes, 417 on tree, 2514 best solution, best possible 2431.4 (252.02 seconds)
Cbc0010I After 13000 nodes, 412 on tree, 2514 best solution, best possible 2435.3489 (253.33 seconds)
Cbc0010I After 13100 nodes, 398 on tree, 2514 best solution, best possible 2435.3489 (254.16 seconds)
Cbc0010I After 13200 nodes, 368 on tree, 2514 best solution, best possible 2435.3489 (255.01 seconds)
Cbc0010I After 13300 nodes, 343 on tree, 2514 best solution, best possible 2435.3489 (256.09 seconds)
Cbc0010I After 13400 nodes, 329 on tree, 2514 best solution, best possible 2435.3489 (257.19 seconds)
Cbc0010I After 13500 nodes, 295 on tree, 2514 best solution, best possible 2435.3489 (257.84 seconds)
Cbc0010I After 13600 nodes, 271 on tree, 2514 best solution, best possible 2435.3489 (258.89 seconds)
Cbc0010I After 13700 nodes, 241 on tree, 2514 best solution, best possible 2435.4762 (259.80 seconds)
Cbc0010I After 13800 nodes, 207 on tree, 2514 best solution, best possible 2435.4762 (260.54 seconds)
Cbc0010I After 13900 nodes, 177 on tree, 2514 best solution, best possible 2435.4762 (261.58 seconds)
Cbc0010I After 14000 nodes, 134 on tree, 2514 best solution, best possible 2435.4762 (262.73 seconds)
Cbc0010I After 14100 nodes, 105 on tree, 2514 best solution, best possible 2451.6852 (264.22 seconds)
Cbc0010I After 14200 nodes, 66 on tree, 2514 best solution, best possible 2475.85 (265.54 seconds)
Cbc0010I After 14300 nodes, 17 on tree, 2514 best solution, best possible 2502.2857 (266.33 seconds)
Cbc0001I Search completed - best objective 2514, took 1239576 iterations and 14336 nodes (266.55 seconds)
Cbc0032I Strong branching done 30494 times (993015 iterations), fathomed 1372 nodes and fixed 2596 variables
Cbc0035I Maximum depth 40, 110764 variables fixed on reduced cost
Cuts at root node changed objective from 1034.09 to 1493.04
Probing was tried 39 times and created 25 cuts of which 0 were active after adding rounds of cuts (0.181 seconds)
Gomory was tried 13346 times and created 3483 cuts of which 0 were active after adding rounds of cuts (17.696 seconds)
Knapsack was tried 39 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.041 seconds)
Clique was tried 39 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
MixedIntegerRounding2 was tried 39 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.315 seconds)
FlowCover was tried 39 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
TwoMirCuts was tried 13346 times and created 361 cuts of which 0 were active after adding rounds of cuts (6.510 seconds)
ZeroHalf was tried 13346 times and created 54961 cuts of which 0 were active after adding rounds of cuts (82.018 seconds)

Result - Optimal solution found

Objective value:                2514.00000000
Enumerated nodes:               14336
Total iterations:               1239576
Time (CPU seconds):             266.59
Time (Wallclock seconds):       268.42

Total time (CPU seconds):       266.59   (Wallclock seconds):       268.42

[2023-04-12T07:03:56Z INFO  he_vectorizer::circ::optimizer] extraction: 268416ms
[2023-04-12T07:03:56Z INFO  he_vectorizer] circuit optimization: 268419ms
[2023-04-12T07:03:56Z INFO  he_vectorizer] plaintext hoisting: 0ms
[2023-04-12T07:03:56Z INFO  he_vectorizer] circuit lowering: 0ms
[2023-04-12T07:03:56Z INFO  he_vectorizer] using pyseal backend for code generation
[2023-04-12T07:03:56Z INFO  he_vectorizer] printed generated code to stdout
def client_pre(wrapper):
    wrapper.client_input("query")
    wrapper.client_input("values")
    wrapper.client_input("keys")
    v_values_1 = wrapper.build_vector("values", None, [0], [FilledDim(0, 256, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_values_1", v_values_1)
    v_query_1 = wrapper.build_vector("query", None, [0], [FilledDim(0, 8, 1, 0, 0, 0, 0), EmptyDim(256, 0, 0, 0)])
    wrapper.client_send("v_query_1", v_query_1)
    v_keys_1 = wrapper.build_vector("keys", None, [0, 0], [FilledDim(1, 8, 1, 0, 0, 0, 0), FilledDim(0, 256, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_keys_1", v_keys_1)

def client_post(wrapper):
    __out = wrapper.client_recv("__out")
    wrapper.client_output(__out)

def server(wrapper):
    v_values_1 = wrapper.server_recv("v_values_1")
    v_query_1 = wrapper.server_recv("v_query_1")
    v_keys_1 = wrapper.server_recv("v_keys_1")
    const_1 = wrapper.const(1)
    const_neg1 = wrapper.const(-1)
    wrapper.start_server_exec()
    wrapper.encode(const_1, [])
    wrapper.encode(const_neg1, [])
    mask = wrapper.ciphertext_array([], 0)
    instr3 = wrapper.subtract(v_query_1.get(), v_keys_1.get())
    wrapper.multiply_inplace(instr3, instr3)
    wrapper.relinearize_inplace(instr3)
    wrapper.multiply_plain_inplace(instr3, const_neg1.get())
    wrapper.add_plain_inplace(instr3, const_1.get())
    instr7 = wrapper.rotate_rows(-1024, instr3)
    wrapper.multiply_inplace(instr7, instr3)
    wrapper.relinearize_inplace(instr7)
    instr9 = wrapper.rotate_rows(-512, instr7)
    wrapper.multiply_inplace(instr7, instr9)
    wrapper.relinearize_inplace(instr7)
    instr11 = wrapper.rotate_rows(-256, instr7)
    wrapper.multiply_inplace(instr7, instr11)
    wrapper.relinearize_inplace(instr7)
    wrapper.set(mask, [], instr7)
    __out = wrapper.ciphertext_array([], 0)
    instr15 = wrapper.multiply(mask.get(), v_values_1.get())
    wrapper.relinearize_inplace(instr15)
    instr16 = wrapper.rotate_rows(-128, instr15)
    wrapper.add_inplace(instr15, instr16)
    instr18 = wrapper.rotate_rows(-64, instr15)
    wrapper.add_inplace(instr18, instr15)
    instr20 = wrapper.rotate_rows(-32, instr18)
    wrapper.add_inplace(instr20, instr18)
    instr22 = wrapper.rotate_rows(-16, instr20)
    wrapper.add_inplace(instr20, instr22)
    instr24 = wrapper.rotate_rows(-8, instr20)
    wrapper.add_inplace(instr20, instr24)
    instr26 = wrapper.rotate_rows(-4, instr20)
    wrapper.add_inplace(instr20, instr26)
    instr28 = wrapper.rotate_rows(-2, instr20)
    wrapper.add_inplace(instr28, instr20)
    instr30 = wrapper.rotate_rows(-1, instr28)
    wrapper.add_inplace(instr28, instr30)
    wrapper.set(__out, [], instr28)
    wrapper.end_server_exec()
    wrapper.server_send("__out", __out)
[2023-04-12T07:03:56Z INFO  he_vectorizer] code generation: 0ms
[2023-04-12T07:03:56Z INFO  he_vectorizer] total compile time: 269220ms
