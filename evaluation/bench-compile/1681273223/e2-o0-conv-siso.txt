[2023-04-12T04:22:09Z INFO  he_vectorizer] parsing: 0ms
[2023-04-12T04:22:09Z INFO  he_vectorizer] elaboration: 0ms
[2023-04-12T04:22:09Z INFO  he_vectorizer::scheduling::scheduler] running scheduler with iter limit: None
[2023-04-12T04:22:09Z INFO  he_vectorizer::scheduling::scheduler] starting scheduler epoch 1
[2023-04-12T04:22:10Z INFO  he_vectorizer::scheduling::scheduler] iteration 1
[2023-04-12T04:22:10Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 4
[2023-04-12T04:22:10Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 4
[2023-04-12T04:22:10Z INFO  he_vectorizer::scheduling::scheduler] iteration 2
[2023-04-12T04:22:10Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 12
[2023-04-12T04:22:10Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 12
[2023-04-12T04:22:10Z INFO  he_vectorizer::scheduling::scheduler] iteration 3
[2023-04-12T04:22:10Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 24
[2023-04-12T04:22:10Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 24
[2023-04-12T04:22:10Z INFO  he_vectorizer::scheduling::scheduler] iteration 4
[2023-04-12T04:22:10Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 24
[2023-04-12T04:22:10Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T04:22:10Z INFO  he_vectorizer::scheduling::scheduler] iteration 5
[2023-04-12T04:22:10Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 0
[2023-04-12T04:22:10Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T04:22:10Z INFO  he_vectorizer::scheduling::scheduler] starting scheduler epoch 2
[2023-04-12T04:22:11Z INFO  he_vectorizer::scheduling::scheduler] iteration 6
[2023-04-12T04:22:11Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 225
[2023-04-12T04:22:11Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 21
[2023-04-12T04:22:19Z INFO  he_vectorizer::scheduling::scheduler] iteration 7
[2023-04-12T04:22:19Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 518
[2023-04-12T04:22:19Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 224
[2023-04-12T04:22:23Z INFO  he_vectorizer::scheduling::scheduler] iteration 8
[2023-04-12T04:22:23Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 509
[2023-04-12T04:22:23Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 282
[2023-04-12T04:22:23Z INFO  he_vectorizer::scheduling::scheduler] iteration 9
[2023-04-12T04:22:23Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 355
[2023-04-12T04:22:23Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 189
[2023-04-12T04:22:23Z INFO  he_vectorizer::scheduling::scheduler] iteration 10
[2023-04-12T04:22:23Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 165
[2023-04-12T04:22:23Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 70
[2023-04-12T04:22:23Z INFO  he_vectorizer::scheduling::scheduler] iteration 11
[2023-04-12T04:22:23Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 0
[2023-04-12T04:22:23Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T04:22:23Z INFO  he_vectorizer::scheduling::scheduler] inline scheduler 1 total visited schedules: 1837
[2023-04-12T04:22:23Z INFO  he_vectorizer] scheduling: 14634ms
[2023-04-12T04:22:23Z INFO  he_vectorizer] circuit generation: 0ms
[2023-04-12T04:22:23Z INFO  he_vectorizer::circ::optimizer] Runner report
    =============
      Stop reason: Saturated
      Iterations: 6
      Egraph size: 89 nodes, 30 classes, 114 memo
      Rebuilds: 0
      Total time: 0.000485636
        Search:  (0.43) 0.000206813
        Apply:   (0.51) 0.000249447
        Rebuild: (0.06) 0.000028201
    
[2023-04-12T04:22:23Z INFO  he_vectorizer::circ::optimizer] equality saturation: 0ms
[2023-04-12T04:22:23Z INFO  he_vectorizer::circ::optimizer] using LP extractor to derive optimized program...
[/home/rolph/.cargo/registry/src/index.crates.io-6f17d22bba15001f/egg-0.9.0/src/lp_extract.rs:137] max_order = 890.0
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Mar 24 2020 

command line - Cbc_C_Interface -solve -quit (default strategy 1)
Continuous objective value is 12.4975 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 75 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 73 strengthened rows, 0 substitutions
Cgl0003I 11 fixed, 21 tightened bounds, 10 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 7 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 16 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 3 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 60 rows, 45 columns (45 integer (45 of which binary)) and 166 elements
Cutoff increment increased from 1e-05 to 2.9999
Cbc0038I Initial state - 19 integers unsatisfied sum - 4.2
Cbc0038I Pass   1: suminf.    4.00000 (8) obj. 112 iterations 14
Cbc0038I Pass   2: suminf.    0.00000 (0) obj. 151 iterations 16
Cbc0038I Solution found of 151
Cbc0038I Rounding solution of 148 is better than previous of 151

Cbc0038I Before mini branch and bound, 25 integers at bound fixed and 0 continuous
Cbc0038I Full problem 60 rows 45 columns, reduced to 28 rows 17 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of 140.38
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   3: suminf.    4.00000 (8) obj. 112 iterations 0
Cbc0038I Pass   4: suminf.    0.84666 (8) obj. 140.38 iterations 6
Cbc0038I Pass   5: suminf.    0.84666 (8) obj. 140.38 iterations 1
Cbc0038I Pass   6: suminf.    1.08922 (8) obj. 140.38 iterations 8
Cbc0038I Pass   7: suminf.    1.08922 (8) obj. 140.38 iterations 2
Cbc0038I Pass   8: suminf.    0.84666 (8) obj. 140.38 iterations 6
Cbc0038I Pass   9: suminf.    0.84666 (8) obj. 140.38 iterations 2
Cbc0038I Pass  10: suminf.    1.76999 (7) obj. 140.38 iterations 15
Cbc0038I Pass  11: suminf.    1.08922 (8) obj. 140.38 iterations 10
Cbc0038I Pass  12: suminf.    4.00000 (8) obj. 112 iterations 12
Cbc0038I Pass  13: suminf.    4.00000 (8) obj. 112 iterations 6
Cbc0038I Pass  14: suminf.    1.08922 (8) obj. 140.38 iterations 14
Cbc0038I Pass  15: suminf.    1.08922 (8) obj. 140.38 iterations 4
Cbc0038I Pass  16: suminf.    1.08922 (8) obj. 140.38 iterations 2
Cbc0038I Pass  17: suminf.    0.84666 (8) obj. 140.38 iterations 8
Cbc0038I Pass  18: suminf.    0.84666 (8) obj. 140.38 iterations 2
Cbc0038I Pass  19: suminf.    1.08922 (8) obj. 140.38 iterations 8
Cbc0038I Pass  20: suminf.    2.31999 (8) obj. 140.38 iterations 7
Cbc0038I Pass  21: suminf.    2.31999 (8) obj. 140.38 iterations 3
Cbc0038I Pass  22: suminf.    2.17999 (8) obj. 140.38 iterations 10
Cbc0038I Pass  23: suminf.    2.17999 (8) obj. 140.38 iterations 4
Cbc0038I Pass  24: suminf.    2.31999 (8) obj. 140.38 iterations 9
Cbc0038I Pass  25: suminf.    6.11601 (19) obj. 140.38 iterations 20
Cbc0038I Pass  26: suminf.    3.66667 (11) obj. 124 iterations 20
Cbc0038I Pass  27: suminf.    3.33333 (10) obj. 136 iterations 2
Cbc0038I Pass  28: suminf.    3.16295 (10) obj. 140.38 iterations 18
Cbc0038I Pass  29: suminf.    3.16295 (10) obj. 140.38 iterations 3
Cbc0038I Pass  30: suminf.    4.00000 (8) obj. 124 iterations 15
Cbc0038I Pass  31: suminf.    4.00000 (8) obj. 124 iterations 2
Cbc0038I Pass  32: suminf.    2.31999 (8) obj. 140.38 iterations 13
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 60 rows 45 columns, reduced to 36 rows 24 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of 148 - took 0.01 seconds
Cbc0012I Integer solution of 148 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 60 rows 45 columns, reduced to 28 rows 17 columns
Cbc0031I 5 added rows had average density of 10.6
Cbc0013I At root node, 23 cuts changed objective from 98.8 to 148 in 2 passes
Cbc0014I Cut generator 0 (Probing) - 2 row cuts average 3.5 elements, 6 column cuts (6 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 6 row cuts average 22.2 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 16 row cuts average 15.4 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 7 row cuts average 5.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0001I Search completed - best objective 148, took 11 iterations and 0 nodes (0.02 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 98.8 to 148
Probing was tried 2 times and created 8 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Gomory was tried 2 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Knapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Clique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 2 times and created 16 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ZeroHalf was tried 2 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                148.00000000
Enumerated nodes:               0
Total iterations:               11
Time (CPU seconds):             0.02
Time (Wallclock seconds):       0.02

Total time (CPU seconds):       0.02   (Wallclock seconds):       0.02

[2023-04-12T04:22:23Z INFO  he_vectorizer::circ::optimizer] extraction: 20ms
[2023-04-12T04:22:23Z INFO  he_vectorizer] circuit optimization: 20ms
[2023-04-12T04:22:23Z INFO  he_vectorizer] plaintext hoisting: 0ms
[2023-04-12T04:22:23Z INFO  he_vectorizer] circuit lowering: 0ms
[2023-04-12T04:22:23Z INFO  he_vectorizer] using pyseal backend for code generation
[2023-04-12T04:22:23Z INFO  he_vectorizer] printed generated code to stdout
def client_pre(wrapper):
    wrapper.client_input("img")
    v_img_1 = wrapper.build_vector("img", None, [0, 0], [FilledDim(1, 32, 1, 0, 0, 0, 0), FilledDim(0, 3, 1, 0, 1, 0, 0), FilledDim(0, 30, 1, 0, 2, 0, 0)])
    wrapper.client_send("v_img_1", v_img_1)

def client_post(wrapper):
    __out = wrapper.client_recv("__out")
    wrapper.client_output(__out)

def server(wrapper):
    wrapper.server_input("filter")
    v_filter_1 = wrapper.build_vector("filter", None, [0, 1], [EmptyDim(30, 0, 0, 2), FilledDim(0, 3, 1, 0, 1, 0, 0), EmptyDim(30, 0, 0, 2)])
    v_filter_2 = wrapper.build_vector("filter", None, [0, 2], [EmptyDim(30, 0, 0, 2), FilledDim(0, 3, 1, 0, 1, 0, 0), EmptyDim(30, 0, 0, 2)])
    v_filter_3 = wrapper.build_vector("filter", None, [0, 0], [EmptyDim(30, 0, 0, 2), FilledDim(0, 3, 1, 0, 1, 0, 0), EmptyDim(30, 0, 0, 2)])
    v_img_1 = wrapper.server_recv("v_img_1")
    const_neg1 = wrapper.const(-1)
    mask_1 = wrapper.mask([(32, 0, 30), (4, 0, 3), (32, 0, 30)])
    wrapper.start_server_exec()
    pt2 = wrapper.plaintext_array([3], 0)
    wrapper.set(pt2, [0], v_filter_3.get())
    wrapper.set(pt2, [1], v_filter_1.get())
    wrapper.set(pt2, [2], v_filter_2.get())
    __partial_1 = wrapper.native_array([3], 0)
    for i7 in range(3):
        instr2 = wrapper.multiply_native(mask_1.get(), pt2.get([i7]))
        wrapper.set(__partial_1, [i7], instr2)
    
    wrapper.encode(const_neg1, [])
    for i7 in range(3):
        wrapper.encode(__partial_1, [i7])
    
    __out = wrapper.ciphertext_array([], 0)
    __reduce_1 = wrapper.ciphertext_array([], 0)
    for i7 in range(3):
        instr4 = wrapper.rotate_rows((-128 * i7), v_img_1.get())
        wrapper.multiply_plain_inplace(instr4, __partial_1.get([i7]))
        wrapper.add_inplace(instr4, __reduce_1.get())
        wrapper.set(__reduce_1, [], instr4)
    
    instr9 = wrapper.rotate_rows(-32, __reduce_1.get())
    wrapper.add_inplace(instr9, __reduce_1.get())
    instr11 = wrapper.rotate_rows(-64, instr9)
    wrapper.add_inplace(instr9, instr11)
    wrapper.set(__out, [], instr9)
    wrapper.end_server_exec()
    wrapper.server_send("__out", __out)
[2023-04-12T04:22:23Z INFO  he_vectorizer] code generation: 0ms
[2023-04-12T04:22:23Z INFO  he_vectorizer] total compile time: 14656ms
