[2023-04-11T15:10:39Z INFO  he_vectorizer] parsing: 0ms
[2023-04-11T15:10:39Z INFO  he_vectorizer] elaboration: 0ms
[2023-04-11T15:10:39Z INFO  he_vectorizer::scheduling::scheduler] running scheduler with iter limit: None
[2023-04-11T15:10:39Z INFO  he_vectorizer::scheduling::scheduler] starting scheduler epoch 1
[2023-04-11T15:10:39Z INFO  he_vectorizer::scheduling::scheduler] iteration 1
[2023-04-11T15:10:39Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 2
[2023-04-11T15:10:39Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 2
[2023-04-11T15:10:39Z INFO  he_vectorizer::scheduling::scheduler] iteration 2
[2023-04-11T15:10:39Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 10
[2023-04-11T15:10:39Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 4
[2023-04-11T15:10:39Z INFO  he_vectorizer::scheduling::scheduler] iteration 3
[2023-04-11T15:10:39Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 0
[2023-04-11T15:10:39Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-11T15:10:39Z INFO  he_vectorizer::scheduling::scheduler] inline scheduler 1 total visited schedules: 13
[2023-04-11T15:10:39Z INFO  he_vectorizer] scheduling: 41ms
[2023-04-11T15:10:39Z INFO  he_vectorizer] circuit generation: 1ms
[2023-04-11T15:10:39Z INFO  he_vectorizer] circuit optimization: 0ms
[2023-04-11T15:10:39Z INFO  he_vectorizer] plaintext hoisting: 0ms
[2023-04-11T15:10:39Z INFO  he_vectorizer] circuit lowering: 0ms
[2023-04-11T15:10:39Z INFO  he_vectorizer] using pyseal backend for code generation
[2023-04-11T15:10:39Z INFO  he_vectorizer] printed generated code to stdout
def client_pre(wrapper):
    wrapper.client_input("point")
    v_point_1 = wrapper.build_vector("point", None, [0], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_point_1", v_point_1)

def client_post(wrapper):
    __out = wrapper.client_recv("__out")
    wrapper.client_output(__out)

def server(wrapper):
    wrapper.server_input("tests")
    v_tests_1 = wrapper.build_vector("tests", Roll(1,0), [0, 0], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_2 = wrapper.build_vector("tests", Roll(1,0), [0, 8], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_3 = wrapper.build_vector("tests", Roll(1,0), [0, 4], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_4 = wrapper.build_vector("tests", Roll(1,0), [0, 22], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_5 = wrapper.build_vector("tests", Roll(1,0), [0, 54], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_6 = wrapper.build_vector("tests", Roll(1,0), [0, 47], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_7 = wrapper.build_vector("tests", Roll(1,0), [0, 36], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_8 = wrapper.build_vector("tests", Roll(1,0), [0, 23], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_9 = wrapper.build_vector("tests", Roll(1,0), [0, 52], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_10 = wrapper.build_vector("tests", Roll(1,0), [0, 32], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_11 = wrapper.build_vector("tests", Roll(1,0), [0, 34], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_12 = wrapper.build_vector("tests", Roll(1,0), [0, 31], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_13 = wrapper.build_vector("tests", Roll(1,0), [0, 11], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_14 = wrapper.build_vector("tests", Roll(1,0), [0, 19], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_15 = wrapper.build_vector("tests", Roll(1,0), [0, 44], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_16 = wrapper.build_vector("tests", Roll(1,0), [0, 16], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_17 = wrapper.build_vector("tests", Roll(1,0), [0, 24], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_18 = wrapper.build_vector("tests", Roll(1,0), [0, 57], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_19 = wrapper.build_vector("tests", Roll(1,0), [0, 55], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_20 = wrapper.build_vector("tests", Roll(1,0), [0, 61], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_21 = wrapper.build_vector("tests", Roll(1,0), [0, 60], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_22 = wrapper.build_vector("tests", Roll(1,0), [0, 14], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_23 = wrapper.build_vector("tests", Roll(1,0), [0, 5], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_24 = wrapper.build_vector("tests", Roll(1,0), [0, 59], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_25 = wrapper.build_vector("tests", Roll(1,0), [0, 27], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_26 = wrapper.build_vector("tests", Roll(1,0), [0, 26], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_27 = wrapper.build_vector("tests", Roll(1,0), [0, 37], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_28 = wrapper.build_vector("tests", Roll(1,0), [0, 13], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_29 = wrapper.build_vector("tests", Roll(1,0), [0, 28], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_30 = wrapper.build_vector("tests", Roll(1,0), [0, 51], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_31 = wrapper.build_vector("tests", Roll(1,0), [0, 10], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_32 = wrapper.build_vector("tests", Roll(1,0), [0, 12], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_33 = wrapper.build_vector("tests", Roll(1,0), [0, 38], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_34 = wrapper.build_vector("tests", Roll(1,0), [0, 29], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_35 = wrapper.build_vector("tests", Roll(1,0), [0, 39], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_36 = wrapper.build_vector("tests", Roll(1,0), [0, 45], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_37 = wrapper.build_vector("tests", Roll(1,0), [0, 43], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_38 = wrapper.build_vector("tests", Roll(1,0), [0, 25], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_39 = wrapper.build_vector("tests", Roll(1,0), [0, 50], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_40 = wrapper.build_vector("tests", Roll(1,0), [0, 1], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_41 = wrapper.build_vector("tests", Roll(1,0), [0, 63], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_42 = wrapper.build_vector("tests", Roll(1,0), [0, 35], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_43 = wrapper.build_vector("tests", Roll(1,0), [0, 30], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_44 = wrapper.build_vector("tests", Roll(1,0), [0, 62], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_45 = wrapper.build_vector("tests", Roll(1,0), [0, 48], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_46 = wrapper.build_vector("tests", Roll(1,0), [0, 3], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_47 = wrapper.build_vector("tests", Roll(1,0), [0, 15], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_48 = wrapper.build_vector("tests", Roll(1,0), [0, 42], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_49 = wrapper.build_vector("tests", Roll(1,0), [0, 6], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_50 = wrapper.build_vector("tests", Roll(1,0), [0, 21], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_51 = wrapper.build_vector("tests", Roll(1,0), [0, 9], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_52 = wrapper.build_vector("tests", Roll(1,0), [0, 41], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_53 = wrapper.build_vector("tests", Roll(1,0), [0, 53], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_54 = wrapper.build_vector("tests", Roll(1,0), [0, 18], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_55 = wrapper.build_vector("tests", Roll(1,0), [0, 7], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_56 = wrapper.build_vector("tests", Roll(1,0), [0, 49], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_57 = wrapper.build_vector("tests", Roll(1,0), [0, 46], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_58 = wrapper.build_vector("tests", Roll(1,0), [0, 20], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_59 = wrapper.build_vector("tests", Roll(1,0), [0, 56], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_60 = wrapper.build_vector("tests", Roll(1,0), [0, 40], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_61 = wrapper.build_vector("tests", Roll(1,0), [0, 2], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_62 = wrapper.build_vector("tests", Roll(1,0), [0, 58], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_63 = wrapper.build_vector("tests", Roll(1,0), [0, 17], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_tests_64 = wrapper.build_vector("tests", Roll(1,0), [0, 33], [FilledDim(0, 64, 1, 0, 0, 0, 0)])
    v_point_1 = wrapper.server_recv("v_point_1")
    const_neg1 = wrapper.const(-1)
    wrapper.start_server_exec()
    wrapper.encode(v_tests_22, [])
    wrapper.encode(v_tests_64, [])
    wrapper.encode(v_tests_2, [])
    wrapper.encode(v_tests_32, [])
    wrapper.encode(v_tests_40, [])
    wrapper.encode(v_tests_13, [])
    wrapper.encode(v_tests_12, [])
    wrapper.encode(v_tests_10, [])
    wrapper.encode(v_tests_54, [])
    wrapper.encode(v_tests_33, [])
    wrapper.encode(v_tests_57, [])
    wrapper.encode(v_tests_56, [])
    wrapper.encode(v_tests_20, [])
    wrapper.encode(v_tests_36, [])
    wrapper.encode(v_tests_31, [])
    wrapper.encode(v_tests_50, [])
    wrapper.encode(v_tests_8, [])
    wrapper.encode(v_tests_46, [])
    wrapper.encode(v_tests_48, [])
    wrapper.encode(v_tests_5, [])
    wrapper.encode(v_tests_30, [])
    wrapper.encode(v_tests_6, [])
    wrapper.encode(v_tests_53, [])
    wrapper.encode(v_tests_27, [])
    wrapper.encode(v_tests_26, [])
    wrapper.encode(v_tests_52, [])
    wrapper.encode(v_tests_58, [])
    wrapper.encode(v_tests_43, [])
    wrapper.encode(v_tests_62, [])
    wrapper.encode(v_tests_60, [])
    wrapper.encode(v_tests_47, [])
    wrapper.encode(v_tests_1, [])
    wrapper.encode(v_tests_61, [])
    wrapper.encode(v_tests_51, [])
    wrapper.encode(v_tests_37, [])
    wrapper.encode(v_tests_19, [])
    wrapper.encode(v_tests_39, [])
    wrapper.encode(v_tests_28, [])
    wrapper.encode(v_tests_25, [])
    wrapper.encode(v_tests_18, [])
    wrapper.encode(v_tests_49, [])
    wrapper.encode(v_tests_44, [])
    wrapper.encode(v_tests_4, [])
    wrapper.encode(v_tests_35, [])
    wrapper.encode(v_tests_16, [])
    wrapper.encode(v_tests_21, [])
    wrapper.encode(v_tests_17, [])
    wrapper.encode(v_tests_41, [])
    wrapper.encode(v_tests_63, [])
    wrapper.encode(v_tests_24, [])
    wrapper.encode(v_tests_42, [])
    wrapper.encode(v_tests_7, [])
    wrapper.encode(v_tests_29, [])
    wrapper.encode(v_tests_34, [])
    wrapper.encode(v_tests_9, [])
    wrapper.encode(v_tests_23, [])
    wrapper.encode(v_tests_14, [])
    wrapper.encode(v_tests_3, [])
    wrapper.encode(v_tests_38, [])
    wrapper.encode(v_tests_55, [])
    wrapper.encode(v_tests_59, [])
    wrapper.encode(v_tests_45, [])
    wrapper.encode(v_tests_15, [])
    wrapper.encode(v_tests_11, [])
    wrapper.encode(const_neg1, [])
    pt1 = wrapper.plaintext_array([64], 0)
    wrapper.set(pt1, [0], v_tests_1.get())
    wrapper.set(pt1, [1], v_tests_40.get())
    wrapper.set(pt1, [2], v_tests_61.get())
    wrapper.set(pt1, [3], v_tests_46.get())
    wrapper.set(pt1, [4], v_tests_3.get())
    wrapper.set(pt1, [5], v_tests_23.get())
    wrapper.set(pt1, [6], v_tests_49.get())
    wrapper.set(pt1, [7], v_tests_55.get())
    wrapper.set(pt1, [8], v_tests_2.get())
    wrapper.set(pt1, [9], v_tests_51.get())
    wrapper.set(pt1, [10], v_tests_31.get())
    wrapper.set(pt1, [11], v_tests_13.get())
    wrapper.set(pt1, [12], v_tests_32.get())
    wrapper.set(pt1, [13], v_tests_28.get())
    wrapper.set(pt1, [14], v_tests_22.get())
    wrapper.set(pt1, [15], v_tests_47.get())
    wrapper.set(pt1, [16], v_tests_16.get())
    wrapper.set(pt1, [17], v_tests_63.get())
    wrapper.set(pt1, [18], v_tests_54.get())
    wrapper.set(pt1, [19], v_tests_14.get())
    wrapper.set(pt1, [20], v_tests_58.get())
    wrapper.set(pt1, [21], v_tests_50.get())
    wrapper.set(pt1, [22], v_tests_4.get())
    wrapper.set(pt1, [23], v_tests_8.get())
    wrapper.set(pt1, [24], v_tests_17.get())
    wrapper.set(pt1, [25], v_tests_38.get())
    wrapper.set(pt1, [26], v_tests_26.get())
    wrapper.set(pt1, [27], v_tests_25.get())
    wrapper.set(pt1, [28], v_tests_29.get())
    wrapper.set(pt1, [29], v_tests_34.get())
    wrapper.set(pt1, [30], v_tests_43.get())
    wrapper.set(pt1, [31], v_tests_12.get())
    wrapper.set(pt1, [32], v_tests_10.get())
    wrapper.set(pt1, [33], v_tests_64.get())
    wrapper.set(pt1, [34], v_tests_11.get())
    wrapper.set(pt1, [35], v_tests_42.get())
    wrapper.set(pt1, [36], v_tests_7.get())
    wrapper.set(pt1, [37], v_tests_27.get())
    wrapper.set(pt1, [38], v_tests_33.get())
    wrapper.set(pt1, [39], v_tests_35.get())
    wrapper.set(pt1, [40], v_tests_60.get())
    wrapper.set(pt1, [41], v_tests_52.get())
    wrapper.set(pt1, [42], v_tests_48.get())
    wrapper.set(pt1, [43], v_tests_37.get())
    wrapper.set(pt1, [44], v_tests_15.get())
    wrapper.set(pt1, [45], v_tests_36.get())
    wrapper.set(pt1, [46], v_tests_57.get())
    wrapper.set(pt1, [47], v_tests_6.get())
    wrapper.set(pt1, [48], v_tests_45.get())
    wrapper.set(pt1, [49], v_tests_56.get())
    wrapper.set(pt1, [50], v_tests_39.get())
    wrapper.set(pt1, [51], v_tests_30.get())
    wrapper.set(pt1, [52], v_tests_9.get())
    wrapper.set(pt1, [53], v_tests_53.get())
    wrapper.set(pt1, [54], v_tests_5.get())
    wrapper.set(pt1, [55], v_tests_19.get())
    wrapper.set(pt1, [56], v_tests_59.get())
    wrapper.set(pt1, [57], v_tests_18.get())
    wrapper.set(pt1, [58], v_tests_62.get())
    wrapper.set(pt1, [59], v_tests_24.get())
    wrapper.set(pt1, [60], v_tests_21.get())
    wrapper.set(pt1, [61], v_tests_20.get())
    wrapper.set(pt1, [62], v_tests_44.get())
    wrapper.set(pt1, [63], v_tests_41.get())
    __out = wrapper.ciphertext_array([], 0)
    __reduce_1 = wrapper.ciphertext_array([64], 0)
    for i4 in range(64):
        instr1 = wrapper.rotate_rows((0 + i4), v_point_1.get())
        wrapper.subtract_plain_inplace(instr1, pt1.get([i4]))
        wrapper.multiply_inplace(instr1, instr1)
        wrapper.relinearize_inplace(instr1)
        wrapper.set(__reduce_1, [i4], instr1)
    
    instr6 = wrapper.add(__reduce_1.get([21]), __reduce_1.get([20]))
    instr7 = wrapper.add(__reduce_1.get([23]), __reduce_1.get([22]))
    wrapper.add_inplace(instr6, instr7)
    instr9 = wrapper.add(__reduce_1.get([17]), __reduce_1.get([16]))
    instr10 = wrapper.add(__reduce_1.get([19]), __reduce_1.get([18]))
    wrapper.add_inplace(instr9, instr10)
    wrapper.add_inplace(instr6, instr9)
    instr13 = wrapper.add(__reduce_1.get([29]), __reduce_1.get([28]))
    instr14 = wrapper.add(__reduce_1.get([31]), __reduce_1.get([30]))
    wrapper.add_inplace(instr13, instr14)
    instr16 = wrapper.add(__reduce_1.get([25]), __reduce_1.get([24]))
    instr17 = wrapper.add(__reduce_1.get([27]), __reduce_1.get([26]))
    wrapper.add_inplace(instr16, instr17)
    wrapper.add_inplace(instr13, instr16)
    wrapper.add_inplace(instr6, instr13)
    instr21 = wrapper.add(__reduce_1.get([5]), __reduce_1.get([4]))
    instr22 = wrapper.add(__reduce_1.get([7]), __reduce_1.get([6]))
    wrapper.add_inplace(instr21, instr22)
    instr24 = wrapper.add(__reduce_1.get([1]), __reduce_1.get([0]))
    instr25 = wrapper.add(__reduce_1.get([3]), __reduce_1.get([2]))
    wrapper.add_inplace(instr24, instr25)
    wrapper.add_inplace(instr21, instr24)
    instr28 = wrapper.add(__reduce_1.get([13]), __reduce_1.get([12]))
    instr29 = wrapper.add(__reduce_1.get([15]), __reduce_1.get([14]))
    wrapper.add_inplace(instr28, instr29)
    instr31 = wrapper.add(__reduce_1.get([9]), __reduce_1.get([8]))
    instr32 = wrapper.add(__reduce_1.get([11]), __reduce_1.get([10]))
    wrapper.add_inplace(instr31, instr32)
    wrapper.add_inplace(instr28, instr31)
    wrapper.add_inplace(instr21, instr28)
    wrapper.add_inplace(instr6, instr21)
    instr37 = wrapper.add(__reduce_1.get([53]), __reduce_1.get([52]))
    instr38 = wrapper.add(__reduce_1.get([55]), __reduce_1.get([54]))
    wrapper.add_inplace(instr37, instr38)
    instr40 = wrapper.add(__reduce_1.get([49]), __reduce_1.get([48]))
    instr41 = wrapper.add(__reduce_1.get([51]), __reduce_1.get([50]))
    wrapper.add_inplace(instr40, instr41)
    wrapper.add_inplace(instr37, instr40)
    instr44 = wrapper.add(__reduce_1.get([61]), __reduce_1.get([60]))
    instr45 = wrapper.add(__reduce_1.get([63]), __reduce_1.get([62]))
    wrapper.add_inplace(instr44, instr45)
    instr47 = wrapper.add(__reduce_1.get([57]), __reduce_1.get([56]))
    instr48 = wrapper.add(__reduce_1.get([59]), __reduce_1.get([58]))
    wrapper.add_inplace(instr47, instr48)
    wrapper.add_inplace(instr44, instr47)
    wrapper.add_inplace(instr37, instr44)
    instr52 = wrapper.add(__reduce_1.get([37]), __reduce_1.get([36]))
    instr53 = wrapper.add(__reduce_1.get([39]), __reduce_1.get([38]))
    wrapper.add_inplace(instr52, instr53)
    instr55 = wrapper.add(__reduce_1.get([33]), __reduce_1.get([32]))
    instr56 = wrapper.add(__reduce_1.get([35]), __reduce_1.get([34]))
    wrapper.add_inplace(instr55, instr56)
    wrapper.add_inplace(instr52, instr55)
    instr59 = wrapper.add(__reduce_1.get([45]), __reduce_1.get([44]))
    instr60 = wrapper.add(__reduce_1.get([47]), __reduce_1.get([46]))
    wrapper.add_inplace(instr59, instr60)
    instr62 = wrapper.add(__reduce_1.get([41]), __reduce_1.get([40]))
    instr63 = wrapper.add(__reduce_1.get([43]), __reduce_1.get([42]))
    wrapper.add_inplace(instr62, instr63)
    wrapper.add_inplace(instr59, instr62)
    wrapper.add_inplace(instr52, instr59)
    wrapper.add_inplace(instr37, instr52)
    wrapper.add_inplace(instr6, instr37)
    wrapper.set(__out, [], instr6)
    wrapper.end_server_exec()
    wrapper.server_send("__out", __out)
[2023-04-11T15:10:39Z INFO  he_vectorizer] code generation: 0ms
[2023-04-11T15:10:39Z INFO  he_vectorizer] total compile time: 44ms
