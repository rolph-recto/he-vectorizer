[2023-04-12T07:20:19Z INFO  he_vectorizer] parsing: 0ms
[2023-04-12T07:20:19Z INFO  he_vectorizer] elaboration: 0ms
[2023-04-12T07:20:19Z INFO  he_vectorizer::scheduling::scheduler] running scheduler with iter limit: None
[2023-04-12T07:20:19Z INFO  he_vectorizer::scheduling::scheduler] starting scheduler epoch 1
[2023-04-12T07:20:19Z INFO  he_vectorizer::scheduling::scheduler] iteration 1
[2023-04-12T07:20:19Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 3
[2023-04-12T07:20:19Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 1
[2023-04-12T07:20:19Z INFO  he_vectorizer::scheduling::scheduler] iteration 2
[2023-04-12T07:20:19Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 4
[2023-04-12T07:20:19Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 1
[2023-04-12T07:20:19Z INFO  he_vectorizer::scheduling::scheduler] iteration 3
[2023-04-12T07:20:19Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 2
[2023-04-12T07:20:19Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T07:20:19Z INFO  he_vectorizer::scheduling::scheduler] iteration 4
[2023-04-12T07:20:19Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 0
[2023-04-12T07:20:19Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T07:20:19Z INFO  he_vectorizer::scheduling::scheduler] starting scheduler epoch 2
[2023-04-12T07:20:20Z INFO  he_vectorizer::scheduling::scheduler] iteration 5
[2023-04-12T07:20:20Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 75
[2023-04-12T07:20:20Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 2
[2023-04-12T07:20:36Z INFO  he_vectorizer::scheduling::scheduler] iteration 6
[2023-04-12T07:20:36Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 220
[2023-04-12T07:20:36Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 5
[2023-04-12T07:20:36Z INFO  he_vectorizer::scheduling::scheduler] iteration 7
[2023-04-12T07:20:36Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 223
[2023-04-12T07:20:36Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T07:20:36Z INFO  he_vectorizer::scheduling::scheduler] iteration 8
[2023-04-12T07:20:36Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 101
[2023-04-12T07:20:36Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 4
[2023-04-12T07:20:36Z INFO  he_vectorizer::scheduling::scheduler] iteration 9
[2023-04-12T07:20:36Z INFO  he_vectorizer::scheduling::scheduler] new schedules visited: 0
[2023-04-12T07:20:36Z INFO  he_vectorizer::scheduling::scheduler] new valid schedules found: 0
[2023-04-12T07:20:36Z INFO  he_vectorizer::scheduling::scheduler] inline scheduler 1 total visited schedules: 629
[2023-04-12T07:20:36Z INFO  he_vectorizer] scheduling: 16880ms
[2023-04-12T07:20:36Z INFO  he_vectorizer] circuit generation: 0ms
[2023-04-12T07:20:36Z INFO  he_vectorizer::circ::optimizer] Runner report
    =============
      Stop reason: NodeLimit(503)
      Iterations: 2
      Egraph size: 492 nodes, 260 classes, 503 memo
      Rebuilds: 0
      Total time: 0.000537561
        Search:  (0.20) 0.000106717
        Apply:   (0.71) 0.00038354700000000003
        Rebuild: (0.09) 0.000046847
    
[2023-04-12T07:20:36Z INFO  he_vectorizer::circ::optimizer] equality saturation: 0ms
[2023-04-12T07:20:36Z INFO  he_vectorizer::circ::optimizer] using LP extractor to derive optimized program...
[/home/rolph/.cargo/registry/src/index.crates.io-6f17d22bba15001f/egg-0.9.0/src/lp_extract.rs:137] max_order = 4920.0
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Mar 24 2020 

command line - Cbc_C_Interface -solve -quit (default strategy 1)
Continuous objective value is 620.088 - 0.01 seconds
Cgl0003I 1 fixed, 0 tightened bounds, 292 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 209 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 40 tightened bounds, 110 strengthened rows, 0 substitutions
Cgl0003I 6 fixed, 10 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 3 fixed, 0 tightened bounds, 3 strengthened rows, 1 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 25 strengthened rows, 0 substitutions
Cgl0003I 2 fixed, 5 tightened bounds, 24 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 7 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 1 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 1 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 801 rows, 471 columns (471 integer (471 of which binary)) and 2023 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0038I Initial state - 181 integers unsatisfied sum - 14.3468
Cbc0038I Pass   1: suminf.   13.95802 (182) obj. 1451.48 iterations 61
Cbc0038I Pass   2: suminf.   13.93725 (180) obj. 1458.43 iterations 7
Cbc0038I Pass   3: suminf.    9.97593 (153) obj. 2038 iterations 47
Cbc0038I Pass   4: suminf.    8.61499 (175) obj. 2004.25 iterations 21
Cbc0038I Pass   5: suminf.    8.45802 (171) obj. 2021.48 iterations 11
Cbc0038I Pass   6: suminf.    8.43725 (169) obj. 2028.43 iterations 6
Cbc0038I Pass   7: suminf.    9.11818 (117) obj. 2542.28 iterations 57
Cbc0038I Pass   8: suminf.    9.02830 (108) obj. 2544.9 iterations 6
Cbc0038I Pass   9: suminf.    8.98630 (100) obj. 2635.95 iterations 5
Cbc0038I Pass  10: suminf.    8.81250 (52) obj. 3035.25 iterations 31
Cbc0038I Pass  11: suminf.    8.81250 (52) obj. 3035.25 iterations 6
Cbc0038I Pass  12: suminf.    9.75000 (25) obj. 3096.5 iterations 26
Cbc0038I Pass  13: suminf.    8.06250 (50) obj. 3036.5 iterations 18
Cbc0038I Pass  14: suminf.    8.00000 (46) obj. 3051.5 iterations 5
Cbc0038I Pass  15: suminf.    9.25000 (24) obj. 3097 iterations 26
Cbc0038I Pass  16: suminf.    7.81250 (43) obj. 3052 iterations 20
Cbc0038I Pass  17: suminf.    7.66667 (43) obj. 3065.07 iterations 8
Cbc0038I Pass  18: suminf.    7.58333 (36) obj. 3077.33 iterations 7
Cbc0038I Pass  19: suminf.    4.50000 (9) obj. 3408.5 iterations 24
Cbc0038I Pass  20: suminf.    4.00000 (8) obj. 3406.5 iterations 7
Cbc0038I Pass  21: suminf.    0.00000 (0) obj. 3471 iterations 16
Cbc0038I Solution found of 3471
Cbc0038I Rounding solution of 3467 is better than previous of 3471

Cbc0038I Before mini branch and bound, 246 integers at bound fixed and 0 continuous
Cbc0038I Full problem 801 rows 471 columns, reduced to 361 rows 200 columns
Cbc0038I Mini branch and bound improved solution from 3467 to 2895 (0.14 seconds)
Cbc0038I Round again with cutoff of 2747.74
Cbc0038I Pass  22: suminf.   13.95802 (182) obj. 1451.48 iterations 0
Cbc0038I Pass  23: suminf.   13.43725 (179) obj. 1548.43 iterations 26
Cbc0038I Pass  24: suminf.   13.43725 (179) obj. 1548.43 iterations 6
Cbc0038I Pass  25: suminf.    8.45802 (171) obj. 2021.48 iterations 21
Cbc0038I Pass  26: suminf.    8.43725 (169) obj. 2028.43 iterations 5
Cbc0038I Pass  27: suminf.   10.15330 (145) obj. 2043.84 iterations 32
Cbc0038I Pass  28: suminf.    8.34053 (174) obj. 2004.98 iterations 24
Cbc0038I Pass  29: suminf.    8.18953 (172) obj. 2020.99 iterations 10
Cbc0038I Pass  30: suminf.    8.15912 (170) obj. 2027.74 iterations 7
Cbc0038I Pass  31: suminf.   12.16981 (142) obj. 2454.97 iterations 43
Cbc0038I Pass  32: suminf.    9.07273 (113) obj. 2513.18 iterations 23
Cbc0038I Pass  33: suminf.    8.42727 (108) obj. 2531.19 iterations 17
Cbc0038I Pass  34: suminf.    8.40566 (106) obj. 2538.14 iterations 12
Cbc0038I Pass  35: suminf.   10.70690 (84) obj. 2557.5 iterations 33
Cbc0038I Pass  36: suminf.    8.95833 (71) obj. 2715.08 iterations 22
Cbc0038I Pass  37: suminf.    8.95833 (71) obj. 2715.08 iterations 1
Cbc0038I Pass  38: suminf.    8.81250 (69) obj. 2672.8 iterations 36
Cbc0038I Pass  39: suminf.    8.10714 (86) obj. 2664.14 iterations 29
Cbc0038I Pass  40: suminf.   11.26562 (71) obj. 2725.75 iterations 30
Cbc0038I Pass  41: suminf.    8.75728 (88) obj. 2647.56 iterations 44
Cbc0038I Pass  42: suminf.    7.97727 (99) obj. 2538.73 iterations 25
Cbc0038I Pass  43: suminf.   10.60833 (88) obj. 2567.57 iterations 30
Cbc0038I Pass  44: suminf.    8.02083 (97) obj. 2532.58 iterations 43
Cbc0038I Pass  45: suminf.   17.03822 (73) obj. 2747.74 iterations 141
Cbc0038I Pass  46: suminf.   10.09715 (73) obj. 2747.74 iterations 92
Cbc0038I Pass  47: suminf.   10.09715 (73) obj. 2747.74 iterations 2
Cbc0038I Pass  48: suminf.   12.42470 (53) obj. 2747.74 iterations 27
Cbc0038I Pass  49: suminf.   10.68561 (63) obj. 2747.74 iterations 19
Cbc0038I Pass  50: suminf.   20.36291 (67) obj. 2747.74 iterations 142
Cbc0038I Pass  51: suminf.   14.22423 (69) obj. 2747.74 iterations 121
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 209 integers at bound fixed and 0 continuous
Cbc0038I Full problem 801 rows 471 columns, reduced to 409 rows 226 columns - 49 fixed gives 154, 124 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.19 seconds)
Cbc0038I After 0.19 seconds - Feasibility pump exiting with objective of 2895 - took 0.11 seconds
Cbc0012I Integer solution of 2895 found by feasibility pump after 0 iterations and 0 nodes (0.19 seconds)
Cbc0038I Full problem 801 rows 471 columns, reduced to 283 rows 156 columns
Cbc0031I 24 added rows had average density of 188.5
Cbc0013I At root node, 24 cuts changed objective from 1431.3604 to 1987.1336 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 13 row cuts average 8.2 elements, 0 column cuts (0 active)  in 0.159 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 1157 row cuts average 254.0 elements, 0 column cuts (0 active)  in 0.441 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.030 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.232 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 234 row cuts average 129.5 elements, 0 column cuts (0 active)  in 0.073 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 2895 best solution, best possible 1987.1336 (2.78 seconds)
Cbc0038I Full problem 801 rows 471 columns, reduced to 114 rows 69 columns
Cbc0038I Full problem 801 rows 471 columns, reduced to 145 rows 87 columns
Cbc0001I Search completed - best objective 2895, took 19987 iterations and 152 nodes (4.81 seconds)
Cbc0032I Strong branching done 1792 times (42477 iterations), fathomed 12 nodes and fixed 47 variables
Cbc0035I Maximum depth 17, 1303 variables fixed on reduced cost
Cuts at root node changed objective from 1431.36 to 1987.13
Probing was tried 100 times and created 13 cuts of which 0 were active after adding rounds of cuts (0.159 seconds)
Gomory was tried 286 times and created 1460 cuts of which 0 were active after adding rounds of cuts (0.535 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.030 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
MixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.232 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
TwoMirCuts was tried 286 times and created 630 cuts of which 0 were active after adding rounds of cuts (0.184 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)

Result - Optimal solution found

Objective value:                2895.00000000
Enumerated nodes:               152
Total iterations:               19987
Time (CPU seconds):             4.83
Time (Wallclock seconds):       4.88

Total time (CPU seconds):       4.83   (Wallclock seconds):       4.88

[2023-04-12T07:20:40Z INFO  he_vectorizer::circ::optimizer] extraction: 4883ms
[2023-04-12T07:20:40Z INFO  he_vectorizer] circuit optimization: 4884ms
[2023-04-12T07:20:40Z INFO  he_vectorizer] plaintext hoisting: 0ms
[2023-04-12T07:20:40Z INFO  he_vectorizer] circuit lowering: 0ms
[2023-04-12T07:20:40Z INFO  he_vectorizer] using pyseal backend for code generation
[2023-04-12T07:20:40Z INFO  he_vectorizer] printed generated code to stdout
def client_pre(wrapper):
    wrapper.client_input("values")
    wrapper.client_input("keys")
    wrapper.client_input("query")
    v_values_1 = wrapper.build_vector("values", None, [0], [FilledDim(0, 1024, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_values_1", v_values_1)
    v_query_1 = wrapper.build_vector("query", None, [8], [FilledDim(0, 2, 1, 0, 6, 0, 0), EmptyDim(1024, 0, 0, 0)])
    wrapper.client_send("v_query_1", v_query_1)
    v_keys_1 = wrapper.build_vector("keys", None, [0, 8], [FilledDim(1, 2, 1, 0, 6, 0, 0), FilledDim(0, 1024, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_keys_1", v_keys_1)
    v_query_2 = wrapper.build_vector("query", None, [0], [FilledDim(0, 8, 1, 0, 0, 0, 0), EmptyDim(1024, 0, 0, 0)])
    wrapper.client_send("v_query_2", v_query_2)
    v_keys_2 = wrapper.build_vector("keys", None, [0, 0], [FilledDim(1, 8, 1, 0, 0, 0, 0), FilledDim(0, 1024, 1, 0, 0, 0, 0)])
    wrapper.client_send("v_keys_2", v_keys_2)

def client_post(wrapper):
    __out = wrapper.client_recv("__out")
    wrapper.client_output(__out)

def server(wrapper):
    v_values_1 = wrapper.server_recv("v_values_1")
    v_query_1 = wrapper.server_recv("v_query_1")
    v_keys_1 = wrapper.server_recv("v_keys_1")
    v_query_2 = wrapper.server_recv("v_query_2")
    v_keys_2 = wrapper.server_recv("v_keys_2")
    const_1 = wrapper.const(1)
    const_neg1 = wrapper.const(-1)
    wrapper.start_server_exec()
    wrapper.encode(const_1, [])
    wrapper.encode(const_neg1, [])
    ct2 = wrapper.ciphertext_array([2], 0)
    wrapper.set(ct2, [0], v_keys_2.get())
    wrapper.set(ct2, [1], v_keys_1.get())
    ct1 = wrapper.ciphertext_array([2], 0)
    wrapper.set(ct1, [0], v_query_2.get())
    wrapper.set(ct1, [1], v_query_1.get())
    mask = wrapper.ciphertext_array([], 0)
    __reduce_1 = wrapper.ciphertext_array([], 1)
    for i2o in range(2):
        instr3 = wrapper.subtract(ct1.get([i2o]), ct2.get([i2o]))
        wrapper.multiply_inplace(instr3, instr3)
        wrapper.relinearize_inplace(instr3)
        wrapper.multiply_plain_inplace(instr3, const_neg1.get())
        wrapper.add_plain_inplace(instr3, const_1.get())
        wrapper.multiply_inplace(instr3, __reduce_1.get())
        wrapper.relinearize_inplace(instr3)
        wrapper.set(__reduce_1, [], instr3)
    
    instr9 = wrapper.rotate_rows(-4096, __reduce_1.get())
    wrapper.multiply_inplace(instr9, __reduce_1.get())
    wrapper.relinearize_inplace(instr9)
    instr11 = wrapper.rotate_rows(-2048, instr9)
    wrapper.multiply_inplace(instr9, instr11)
    wrapper.relinearize_inplace(instr9)
    instr13 = wrapper.rotate_rows(-1024, instr9)
    wrapper.multiply_inplace(instr9, instr13)
    wrapper.relinearize_inplace(instr9)
    wrapper.set(mask, [], instr9)
    __out = wrapper.ciphertext_array([], 0)
    instr17 = wrapper.multiply(mask.get(), v_values_1.get())
    wrapper.relinearize_inplace(instr17)
    instr18 = wrapper.rotate_rows(-512, instr17)
    wrapper.add_inplace(instr17, instr18)
    instr20 = wrapper.rotate_rows(-256, instr17)
    wrapper.add_inplace(instr17, instr20)
    instr22 = wrapper.rotate_rows(-128, instr17)
    wrapper.add_inplace(instr22, instr17)
    instr24 = wrapper.rotate_rows(-64, instr22)
    wrapper.add_inplace(instr24, instr22)
    instr26 = wrapper.rotate_rows(-32, instr24)
    wrapper.add_inplace(instr24, instr26)
    instr28 = wrapper.rotate_rows(-16, instr24)
    wrapper.add_inplace(instr24, instr28)
    instr30 = wrapper.rotate_rows(-8, instr24)
    wrapper.add_inplace(instr24, instr30)
    instr32 = wrapper.rotate_rows(-4, instr24)
    wrapper.add_inplace(instr32, instr24)
    instr34 = wrapper.rotate_rows(-2, instr32)
    wrapper.add_inplace(instr34, instr32)
    instr36 = wrapper.rotate_rows(-1, instr34)
    wrapper.add_inplace(instr34, instr36)
    wrapper.set(__out, [], instr34)
    wrapper.end_server_exec()
    wrapper.server_send("__out", __out)
[2023-04-12T07:20:40Z INFO  he_vectorizer] code generation: 0ms
[2023-04-12T07:20:40Z INFO  he_vectorizer] total compile time: 21766ms
